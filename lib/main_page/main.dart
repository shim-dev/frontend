//import 'package:capstone_trial_01/DB/db_keyword.dart';
//import 'package:capstone_trial_01/profile_edit.dart';
//import 'package:shim/main_page/recipe_search_result.dart';
//import 'package:capstone_trial_01/signup_test.dart';
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:shim/DB/db_recipe.dart';
import 'package:shim/DB/db_record.dart';
import 'package:shim/main_page/breakfast_log.dart';
import 'package:shim/main_page/dinner_log.dart';
import 'package:shim/main_page/lunch_log.dart';
import 'package:shim/main_page/search_screen_bf.dart';
import 'package:shim/main_page/search_screen_din.dart';
import 'package:shim/main_page/search_screen_ln.dart';
import 'package:shim/main_page/search_screen_snack.dart';
//import 'Q&A.dart';
//import 'announcement.dart';
//import 'book_mark_page.dart';
//import 'event.dart';
import 'package:shim/main_page/sleep_log.dart'; // 파일 경로에 맞게
import 'package:shim/main_page/snack_log.dart';
import 'package:shim/main_page/splash_screen.dart'; // 나중에 수정
import 'package:shim/main_page/water_log.dart';
import 'package:shim/recipe_page/recipe_search_result.dart';
import 'package:table_calendar/table_calendar.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await initializeDateFormatting('ko_KR', null);
  runApp(const AppRoot());
}

class AppRoot extends StatelessWidget {
  const AppRoot({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: SplashScreen(), // 앱 시작시 Splash 화면!
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      debugShowCheckedModeBanner: false,
    );
  }
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
  const FigmaToCodeApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ExampleScreen(),
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
    );
  }
}

class ExampleScreen extends StatefulWidget {
  @override
  _ExampleScreenState createState() => _ExampleScreenState();
}

class _ExampleScreenState extends State<ExampleScreen> {
  // 닉네임 변경 콜백 시작 제발요 //
  String? nickname;

  Future<void> _loadNickname() async {
    final storage = FlutterSecureStorage();
    String? name = await storage.read(key: 'nickname');
    setState(() {
      nickname = name ?? '사용자';
    });
  }
  // 닉네임 변경 콜백 끝 //

  // 캘린더 관련 모음 //
  DateTime _selectedDay = DateTime.now();

  Map<String, List<Map<String, dynamic>>> _dailyFoods = {
    'breakfast': [],
    'lunch': [],
    'dinner': [],
    'snack': [],
  };

  Map<String, int> _scores = {
    'breakfast': 0,
    'lunch': 0,
    'dinner': 0,
    'snack': 0,
  };

  /////////// 실험실 실험실 실험실 ///////////

  // 전체 음식 점수
  List<Map<String, dynamic>> _allRecords = [];
  Future<void> fetchAllRecords() async {
    final records = await getAllRecords();
    print('🟢 fetchAllRecords() 받은 records: $records');
    setState(() {
      _allRecords = records;
    });
  }

  /////////// 실험실 실험실 실험실 ///////////

  Future<void> fetchCalendarFoods(DateTime day) async {
    String formattedDate =
        '${day.year}.${day.month.toString().padLeft(2, '0')}.${day.day.toString().padLeft(2, '0')}';
    Map<String, List<Map<String, dynamic>>> newFoods = {};
    Map<String, int> newScores = {};

    for (var mealType in ['breakfast', 'lunch', 'dinner', 'snack']) {
      final foods = await getRecordsByDate(mealType, formattedDate);
      newFoods[mealType] = foods;
      int score = 0;
      for (var food in foods) {
        if (food.containsKey('score')) {
          score += (food['score'] as num).toInt();
        } else {
          double carbohydrate = (food['carbohydrate_g'] ?? 0).toDouble();
          double fat = (food['fat_g'] ?? 0).toDouble();
          score += (carbohydrate * 2 + fat * 3).toInt();
        }
      }
      newScores[mealType] = score;
    }
    int waterCups = await getWaterCups(formattedDate);
    newFoods['water'] = [
      {'water_cups': waterCups},
    ];

    // 3) 수면 데이터 추가
    double sleepHours = await getSleep(formattedDate);
    newFoods['sleep'] = [
      {'sleep_hours': sleepHours},
    ];
    setState(() {
      _dailyFoods = newFoods;
      _scores = newScores;
    });
  }

  void _onDayChanged(DateTime selected) async {
    _selectedDay = selected;
    await fetchCalendarFoods(selected);
    setState(() {});
  }

  // HomeTab에서 음식 변경 후 실행할 콜백!
  Future<void> onFoodChanged() async {
    print('📢 onFoodChanged 호출됨!');
    await fetchCalendarFoods(_selectedDay);
    await fetchAllRecords(); // 캘린더 갱신
    await calculateScoresFromDB();
    setState(() {});
  }

  /////////////////////////////

  int _selectedIndex = 0;
  ValueNotifier<int> breakfastScore = ValueNotifier<int>(0);
  ValueNotifier<int> lunchScore = ValueNotifier<int>(0);
  ValueNotifier<int> dinnerScore = ValueNotifier<int>(0);
  ValueNotifier<int> snackScore = ValueNotifier<int>(0);

  @override
  void initState() {
    super.initState();
    calculateScoresFromDB();
    fetchCalendarFoods(_selectedDay);
    fetchAllRecords();
    _loadNickname();
  }

  Future<void> calculateScoresFromDB() async {
    // 아침
    List<Map<String, dynamic>> breakfastFoods = await getRecords1('breakfast');
    int bfScore = 0;
    for (var food in breakfastFoods) {
      if (food.containsKey('score')) {
        bfScore += (food['score'] as num).toInt();
      } else {
        double carbohydrate = (food['carbohydrate_g'] ?? 0).toDouble();
        double fat = (food['fat_g'] ?? 0).toDouble();
        bfScore += (carbohydrate * 2 + fat * 3).toInt();
      }
    }
    breakfastScore.value = bfScore;

    // 점심
    List<Map<String, dynamic>> lunchFoods = await getRecords1('lunch');
    int lnScore = 0;
    for (var food in lunchFoods) {
      if (food.containsKey('score')) {
        lnScore += (food['score'] as num).toInt();
      } else {
        double carbohydrate = (food['carbohydrate_g'] ?? 0).toDouble();
        double fat = (food['fat_g'] ?? 0).toDouble();
        lnScore += (carbohydrate * 2 + fat * 3).toInt();
      }
    }
    lunchScore.value = lnScore;

    // 저녁
    List<Map<String, dynamic>> dinnerFoods = await getRecords1('dinner');
    int dnScore = 0;
    for (var food in dinnerFoods) {
      if (food.containsKey('score')) {
        dnScore += (food['score'] as num).toInt();
      } else {
        double carbohydrate = (food['carbohydrate_g'] ?? 0).toDouble();
        double fat = (food['fat_g'] ?? 0).toDouble();
        dnScore += (carbohydrate * 2 + fat * 3).toInt();
      }
    }
    dinnerScore.value = dnScore;

    // 간식
    List<Map<String, dynamic>> snackFoods = await getRecords1('snack');
    int snScore = 0;
    for (var food in snackFoods) {
      if (food.containsKey('score')) {
        snScore += (food['score'] as num).toInt();
      } else {
        double carbohydrate = (food['carbohydrate_g'] ?? 0).toDouble();
        double fat = (food['fat_g'] ?? 0).toDouble();
        snScore += (carbohydrate * 2 + fat * 3).toInt();
      }
    }
    snackScore.value = snScore;
  }

  void _onItemTapped(int idx) => setState(() => _selectedIndex = idx);

  @override
  Widget build(BuildContext context) {
    List<Widget> _pages = [
      HomeTab(
        breakfastScore: breakfastScore,
        lunchScore: lunchScore,
        dinnerScore: dinnerScore,
        snackScore: snackScore,
        calculateScoresFromDB: calculateScoresFromDB,
        parentSetState: () => setState(() {}),
        onFoodChanged: onFoodChanged,
        nickname: nickname ?? '사용자',
        allRecords: _allRecords,
        //onNicknameChanged: _loadNickname,
      ),
      CalendarTab(
        selectedDay: _selectedDay,
        dailyFoods: _dailyFoods,
        scores: _scores,
        onDayChanged: _onDayChanged,
        allRecords: _allRecords,
      ),
      PeopleTab(onFoodChanged: onFoodChanged),
      //MyTab(nickname: nickname ?? '사용자', onNicknameChanged: _loadNickname),
    ];

    return Scaffold(
      backgroundColor: Colors.white,
      body: IndexedStack(index: _selectedIndex, children: _pages),
      bottomNavigationBar: _buildBottomNavigation(),
    );
  }

  Widget _buildBottomNavigation() {
    List<String> icons = [
      'assets/icon/icon_home.svg',
      'assets/icon/calender.svg',
      'assets/icon/icon_people.svg',
      'assets/icon/icon_my.svg',
    ];
    return Container(
      height: 75,
      padding: EdgeInsets.symmetric(horizontal: 40),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Color(0x3F000000),
            blurRadius: 20,
            offset: Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: List.generate(icons.length, (index) {
          return InkWell(
            onTap: () => _onItemTapped(index),
            child: SvgPicture.asset(
              icons[index],
              width: 30,
              height: 30,
              colorFilter: ColorFilter.mode(
                _selectedIndex == index ? Color(0xFF0A8356) : Color(0xFFBDBDBD),
                BlendMode.srcIn,
              ),
            ),
          );
        }),
      ),
    );
  }
}

// ================= HomeTab 위젯 (기존 UI 전체 복붙) ===================
class HomeTab extends StatefulWidget {
  final String nickname;
  //final VoidCallback onNicknameChanged;
  final ValueNotifier<int> breakfastScore;
  final ValueNotifier<int> lunchScore;
  final ValueNotifier<int> dinnerScore;
  final ValueNotifier<int> snackScore;
  final Future<void> Function() calculateScoresFromDB;
  final VoidCallback parentSetState;
  final Future<void> Function() onFoodChanged;
  final List<Map<String, dynamic>> allRecords;

  const HomeTab({
    required this.nickname,
    //required this.onNicknameChanged,
    required this.breakfastScore,
    required this.lunchScore,
    required this.dinnerScore,
    required this.snackScore,
    required this.calculateScoresFromDB,
    required this.parentSetState,
    required this.onFoodChanged,
    required this.allRecords,
  });

  @override
  State<HomeTab> createState() => _HomeTabState();
}

class _HomeTabState extends State<HomeTab> {
  int waterCups = 0;
  double _sleepHours = 0.0;
  String? nickname;

  @override
  void initState() {
    super.initState();
    _loadWaterCups();
    _loadTodaySleep();
  }

  Future<void> _loadWaterCups() async {
    final cups = await getTodayCups();
    setState(() {
      waterCups = cups;
    });
  }

  void _showWaterDialog() async {
    final selected = await showDialog<int>(
      context: context,
      builder:
          (_) => WaterIntakeDialog(
            initialCups: waterCups,
            onSaved: (value) async {
              await saveWaterCups(value);
            },
          ),
    );
    if (selected != null) {
      setState(() {
        waterCups = selected;
      });
      await widget.onFoodChanged();
    }
  }

  void _loadTodaySleep() async {
    DateTime today = DateTime.now();
    String formattedDate =
        '${today.year}.${today.month.toString().padLeft(2, '0')}.${today.day.toString().padLeft(2, '0')}';
    double hours = await getSleep(formattedDate);
    setState(() {
      _sleepHours = hours;
    });
  }

  void _showSleepDialog() async {
    DateTime today = DateTime.now();
    String formattedDate =
        '${today.year}.${today.month.toString().padLeft(2, '0')}.${today.day.toString().padLeft(2, '0')}';
    await showDialog(
      context: context,
      builder:
          (context) => SleepLogDialog(
            initialHours: _sleepHours,
            onSaved: (val) async {
              setState(() {
                _sleepHours = val;
              });
              await insertOrUpdateSleep(val, formattedDate);
              await widget.onFoodChanged();
            },
          ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;

    return Container(
      color: const Color(0xFFF7F8FC), // 연한 그레이/민트 배경
      child: SingleChildScrollView(
        physics: BouncingScrollPhysics(),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // 1. 상단부 헤더
            GradientHeaderCard(
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "Hi, ${widget.nickname}님!",
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 25,
                          fontWeight: FontWeight.bold,
                          letterSpacing: 0.2,
                        ),
                      ),
                      SizedBox(height: 9),
                      Text(
                        "오늘의 건강 기록",
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.92),
                          fontSize: 16,
                          fontWeight: FontWeight.w400,
                          letterSpacing: 0.1,
                        ),
                      ),
                    ],
                  ),
                  CircleAvatar(
                    backgroundColor: Colors.white.withOpacity(0.32),
                    radius: 22,
                    child: Image.asset(
                      'assets/icon/heart_front_color.png',
                      width: 28,
                      height: 28,
                    ),
                  ),
                ],
              ),
            ),

            SizedBox(height: screenHeight * 0.03),

            // 2. 점수 카드 (3개)
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22),
              child: Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(22),
                ),
                color: Colors.white,
                elevation: 2,
                child: Padding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 13,
                    vertical: 17,
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildScoreMini(
                        "아침",
                        "assets/icon/morning.svg",
                        widget.breakfastScore,
                      ),
                      _buildScoreMini(
                        "점심",
                        "assets/icon/afternoon.svg",
                        widget.lunchScore,
                      ),
                      _buildScoreMini(
                        "저녁",
                        "assets/icon/night.svg",
                        widget.dinnerScore,
                      ),
                    ],
                  ),
                ),
              ),
            ),

            SizedBox(height: screenHeight * 0.024),

            // 3. 메인 점수 이미지 박스
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 26),
              child: Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(28),
                ),
                color: Color(0xFFF2F3FF),
                elevation: 0,
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 26),
                  child: _buildTotalScoreImageBox(),
                ),
              ),
            ),

            SizedBox(height: screenHeight * 0.024),

            // 4. 물/수면 카드 (리디자인)
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22),
              child: Row(
                children: [
                  Expanded(
                    child: _progressCardMini(
                      'assets/icon/water.svg',
                      '$waterCups/8',
                      _showWaterDialog,
                    ),
                  ),
                  SizedBox(width: 15),
                  Expanded(
                    child: _progressCardMini(
                      'assets/icon/sleep.svg',
                      '${_sleepHours.toStringAsFixed(1)} Hr',
                      _showSleepDialog,
                    ),
                  ),
                ],
              ),
            ),

            SizedBox(height: screenHeight * 0.024),

            // 5. 식사/간식 기록 카드
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22),
              child: Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(22),
                ),
                color: Colors.white,
                elevation: 1,
                child: Padding(
                  padding: const EdgeInsets.symmetric(
                    vertical: 18,
                    horizontal: 12,
                  ),
                  child: _buildMealCards(context),
                ),
              ),
            ),

            SizedBox(height: screenHeight * 0.021),

            // 6. 공지 및 기타
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 30),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    '공지사항 📢',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF22234C),
                    ),
                  ),
                ],
              ),
            ),
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22, vertical: 6),
              child: Information(),
            ),
            SizedBox(height: 10),
          ],
        ),
      ),
    );
  }

  Widget _buildTotalScoreImageBox() {
    int totalScore = 0;
    for (var food in widget.allRecords) {
      if (food.containsKey('score')) {
        totalScore += (food['score'] as num).toInt();
      } else {
        double carbohydrate = (food['carbohydrate_g'] ?? 0).toDouble();
        double fat = (food['fat_g'] ?? 0).toDouble();
        totalScore += (carbohydrate * 2 + fat * 3).toInt();
      }
    }

    String assetPath;
    if (totalScore >= 100) {
      assetPath = 'assets/icon/fish.svg';
    } else if (totalScore >= 60) {
      assetPath = 'assets/icon/carrot.svg';
    } else if (totalScore >= 30) {
      assetPath = 'assets/icon/apple.svg';
    } else {
      assetPath = 'assets/icon/question01.svg';
    }

    return Container(
      width: 320,
      height: 210,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SvgPicture.asset(assetPath, width: 110, height: 110),
          SizedBox(height: 10),
          Text(
            '전체 건강 점수: $totalScore',
            style: TextStyle(
              color: Color(0xFF695ACD),
              fontWeight: FontWeight.bold,
              fontSize: 20,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildScoreMini(
    String label,
    String iconPath,
    ValueNotifier<int> scoreNotifier,
  ) {
    return ValueListenableBuilder<int>(
      valueListenable: scoreNotifier,
      builder: (context, value, _) {
        return Column(
          children: [
            Container(
              width: 38,
              height: 38,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: LinearGradient(
                  colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: Center(
                child: SvgPicture.asset(
                  iconPath,
                  width: 20,
                  height: 20,
                  color: Colors.white,
                ),
              ),
            ),
            SizedBox(height: 7),
            Text(
              "$value",
              style: TextStyle(
                fontSize: 17,
                fontWeight: FontWeight.w700,
                color: Color(0xFF695ACD),
              ),
            ),
            Text(
              label,
              style: TextStyle(fontSize: 13, color: Color(0xFF999BBC)),
            ),
          ],
        );
      },
    );
  }

  // 이 부분이 새롭게 리디자인된 '물/수면' 카드!
  Widget _progressCardMini(String icon, String value, VoidCallback onTap) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(18),
      child: Container(
        height: 58,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(18),
          boxShadow: [
            BoxShadow(
              color: Color(0x208F80F9),
              blurRadius: 10,
              offset: Offset(0, 4),
            ),
          ],
        ),
        child: Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SvgPicture.asset(
                icon,
                width: 21,
                height: 21,
                colorFilter: ColorFilter.mode(Colors.white, BlendMode.srcIn),
              ),
              SizedBox(width: 10),
              Text(
                value,
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 17,
                  letterSpacing: 0.5,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMealCards(BuildContext context) {
    List<Map<String, dynamic>> meals = [
      {
        'icon': 'assets/icon/breakfast.svg',
        'text': '아침',
        'score': widget.breakfastScore,
        'screen': BreakfastLog(),
        'searchScreen': SearchScreenBf(),
      },
      {
        'icon': 'assets/icon/lunch.svg',
        'text': '점심',
        'score': widget.lunchScore,
        'screen': LunchLog(),
        'searchScreen': SearchScreenLn(),
      },
      {
        'icon': 'assets/icon/dinner.svg',
        'text': '저녁',
        'score': widget.dinnerScore,
        'screen': DinnerLog(),
        'searchScreen': SearchScreenDin(),
      },
      {
        'icon': 'assets/icon/snack.svg',
        'text': '간식',
        'score': widget.snackScore,
        'screen': SnackLog(),
        'searchScreen': SearchScreenSnack(),
      },
    ];

    return Column(
      children:
          meals
              .map(
                (meal) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 6),
                  child: _modernMealTile(
                    context,
                    meal['icon']!,
                    meal['text']!,
                    meal['score'],
                    meal['screen'],
                    meal['searchScreen'],
                  ),
                ),
              )
              .toList(),
    );
  }

  // 곡률 값을 하나의 변수로!

  Widget _modernMealTile(
    BuildContext context,
    String icon,
    String text,
    ValueNotifier<int>? scoreNotifier,
    Widget logScreen,
    Widget searchScreen,
  ) {
    return ValueListenableBuilder<int>(
      valueListenable: scoreNotifier!,
      builder: (context, score, _) {
        return GestureDetector(
          onTap: () async {
            // 카드 전체 터치 → SearchScreen 다이얼로그
            await showGeneralDialog(
              context: context,
              barrierDismissible: true,
              barrierLabel: 'Dismiss',
              barrierColor: Colors.black.withOpacity(0.25),
              transitionDuration: Duration(milliseconds: 200),
              pageBuilder: (context, animation, secondaryAnimation) {
                return Builder(
                  builder: (context) {
                    // 각 searchScreen 타입별 콜백 연결
                    if (searchScreen is SearchScreenBf) {
                      return SearchScreenBf(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else if (searchScreen is SearchScreenLn) {
                      return SearchScreenLn(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else if (searchScreen is SearchScreenDin) {
                      return SearchScreenDin(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else if (searchScreen is SearchScreenSnack) {
                      return SearchScreenSnack(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else {
                      return searchScreen;
                    }
                  },
                );
              },
            );
          },
          child: Container(
            height: 65,
            margin: EdgeInsets.symmetric(vertical: 3),
            child: CustomPaint(
              painter: _GradientBorderPainter(),
              child: Container(
                margin: EdgeInsets.all(borderWidth),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(cardRadius),
                ),
                child: Row(
                  children: [
                    SizedBox(width: 17),
                    // 연보라 동그라미 + 하얀 svg
                    Container(
                      width: 36,
                      height: 36,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Color(0xFF8F80F9),
                      ),
                      child: Center(
                        child: SvgPicture.asset(
                          icon,
                          width: 22,
                          height: 22,
                          colorFilter: ColorFilter.mode(
                            Colors.white,
                            BlendMode.srcIn,
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 13),
                    Text(
                      text,
                      style: TextStyle(
                        color: Color(0xFF8F80F9),
                        fontSize: 19,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Spacer(),
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: 13,
                        vertical: 6,
                      ),
                      decoration: BoxDecoration(
                        color: Color(0x1A19C188), // 연한 민트, 0x1A는 10% 투명
                        borderRadius: BorderRadius.circular(14),
                      ),
                      child: Text(
                        '$score',
                        style: TextStyle(
                          color: Color(0xFF19C188), // 진한 민트
                          fontWeight: FontWeight.w600,
                          fontSize: 17,
                        ),
                      ),
                    ),
                    SizedBox(width: 7),
                    // +버튼만 별도 GestureDetector!
                    GestureDetector(
                      behavior: HitTestBehavior.opaque,
                      onTap: () async {
                        // +버튼 터치 → LogScreen 다이얼로그
                        await showGeneralDialog(
                          context: context,
                          barrierDismissible: true,
                          barrierLabel: 'Dismiss',
                          barrierColor: Colors.black.withOpacity(0.25),
                          transitionDuration: Duration(milliseconds: 200),
                          pageBuilder: (
                            context,
                            animation,
                            secondaryAnimation,
                          ) {
                            return Builder(
                              builder: (context) {
                                if (logScreen is BreakfastLog) {
                                  return BreakfastLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else if (logScreen is LunchLog) {
                                  return LunchLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else if (logScreen is DinnerLog) {
                                  return DinnerLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else if (logScreen is SnackLog) {
                                  return SnackLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else {
                                  return logScreen;
                                }
                              },
                            );
                          },
                        );
                      },
                      child: Container(
                        width: 29,
                        height: 29,
                        decoration: BoxDecoration(
                          color: Color(0xFF19C188),
                          shape: BoxShape.circle,
                          border: Border.all(
                            color: Color(0xFF19C188),
                            width: 2,
                          ),
                        ),
                        child: Center(
                          child: Icon(Icons.add, color: Colors.white, size: 18),
                        ),
                      ),
                    ),
                    SizedBox(width: 13),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  // 공지/슬라이드 인포 카드 그대로
  Widget Information() {
    return Container(
      width: 370,
      height: 85,
      decoration: ShapeDecoration(
        color: const Color(0xCCD9D9D9),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24)),
      ),
      child: Stack(
        alignment: Alignment.center,
        children: [
          Positioned(
            left: 16,
            child: SvgPicture.asset(
              'assets/icon/left_arrow.svg',
              width: 10,
              height: 17,
            ),
          ),
          Positioned(
            right: 16,
            child: SvgPicture.asset(
              'assets/icon/right_arrow.svg',
              width: 10,
              height: 17,
            ),
          ),
          Positioned(
            bottom: 11,
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                SvgPicture.asset('assets/icon/circle.svg', width: 8, height: 8),
                SizedBox(width: 16),
                SvgPicture.asset(
                  'assets/icon/empty_circle.svg',
                  width: 7,
                  height: 7,
                ),
                SizedBox(width: 16),
                SvgPicture.asset(
                  'assets/icon/empty_circle.svg',
                  width: 7,
                  height: 7,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

///////
class CalendarTab extends StatelessWidget {
  final DateTime selectedDay;
  final Map<String, List<Map<String, dynamic>>> dailyFoods;
  final Map<String, int> scores;
  final Function(DateTime) onDayChanged;
  final List<Map<String, dynamic>> allRecords;

  // pointGreen도 필드로 추가!
  final Color pointGreen;

  const CalendarTab({
    required this.selectedDay,
    required this.dailyFoods,
    required this.scores,
    required this.onDayChanged,
    required this.allRecords,
    this.pointGreen = const Color(0xFF8F80F9), // 기본값 가능
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;

    final calendarHeight = screenHeight * 0.47; // 살짝 줄임

    return Column(
      children: [
        // 1. 상단 헤더 (둥근 그라데이션 배경)
        Container(
          width: double.infinity,
          height: screenHeight * 0.16,
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.only(
              bottomLeft: Radius.circular(34),
              bottomRight: Radius.circular(34),
            ),
          ),
          child: SafeArea(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                const SizedBox(height: 12),
                Text(
                  "캘린더",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 23,
                    fontWeight: FontWeight.w700,
                    letterSpacing: 0.5,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  "${selectedDay.year}년 ${selectedDay.month}월",
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.88),
                    fontSize: 15,
                    fontWeight: FontWeight.w400,
                  ),
                ),
              ],
            ),
          ),
        ),

        // 2. 캘린더 카드 (띄워진 카드 + 흰색, 그림자 효과)
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(24),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.04),
                blurRadius: 12,
                offset: const Offset(0, 6),
              ),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 7),
            child: TableCalendar(
              locale: 'ko_KR',
              firstDay: DateTime(2024, 1, 1),
              lastDay: DateTime(2030, 12, 31),
              focusedDay: selectedDay,
              selectedDayPredicate: (day) => isSameDay(day, selectedDay),
              onDaySelected: (selected, focused) => onDayChanged(selected),
              rowHeight: calendarHeight * 0.13,
              daysOfWeekHeight: calendarHeight * 0.06,
              calendarStyle: CalendarStyle(
                selectedDecoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  shape: BoxShape.circle,
                ),
                todayDecoration: BoxDecoration(
                  color: pointGreen.withOpacity(0.13),
                  shape: BoxShape.circle,
                ),
                markerDecoration: BoxDecoration(
                  color: pointGreen,
                  shape: BoxShape.circle,
                ),
                defaultTextStyle: TextStyle(
                  color: Colors.grey[900],
                  fontWeight: FontWeight.w600,
                  fontSize: 16,
                ),
                weekendTextStyle: TextStyle(
                  color: Colors.grey[500],
                  fontWeight: FontWeight.w600,
                  fontSize: 16,
                ),
                outsideTextStyle: TextStyle(
                  color: Colors.grey[300],
                  fontWeight: FontWeight.normal,
                  fontSize: 14,
                ),
              ),
              headerStyle: HeaderStyle(
                formatButtonVisible: false,
                titleCentered: true,
                leftChevronIcon: Icon(
                  Icons.chevron_left,
                  color: pointGreen,
                  size: 28,
                ),
                rightChevronIcon: Icon(
                  Icons.chevron_right,
                  color: pointGreen,
                  size: 28,
                ),
                titleTextStyle: TextStyle(
                  color: pointGreen,
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                ),
                headerMargin: const EdgeInsets.only(bottom: 6),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.95),
                  borderRadius: BorderRadius.circular(18),
                ),
              ),
              daysOfWeekStyle: DaysOfWeekStyle(
                weekdayStyle: TextStyle(
                  color: pointGreen,
                  fontWeight: FontWeight.w700,
                  fontSize: 15,
                ),
                weekendStyle: TextStyle(
                  color: Color(0xFF5ED593),
                  fontWeight: FontWeight.w700,
                  fontSize: 15,
                ),
              ),
            ),
          ),
        ),

        // 3. 카드 리스트 (기존 그대로)
        Expanded(
          child: ListView(
            padding: EdgeInsets.zero,
            children: [
              _buildTotalScoreCard(context),

              for (var mealType in [
                'breakfast',
                'lunch',
                'dinner',
                'snack',
                'water',
                'sleep',
              ])
                _buildMealSection(context, mealType),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildMealSection(BuildContext context, String mealType) {
    final foods = dailyFoods[mealType] ?? [];
    final score = scores[mealType] ?? 0;
    final icons = {
      'breakfast': Icons.free_breakfast,
      'lunch': Icons.lunch_dining,
      'dinner': Icons.nights_stay,
      'snack': Icons.cookie,
      'water': Icons.water_drop,
      'sleep': Icons.bedtime,
    };
    if (mealType == 'water') {
      int cups = (foods.isNotEmpty ? (foods.first['water_cups'] ?? 0) : 0);
      return Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        child: Stack(
          children: [
            // 그라데이션 테두리
            ClipRRect(
              borderRadius: BorderRadius.circular(18),
              child: Container(
                height: 54,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                ),
              ),
            ),
            // 흰색 내부 카드
            Container(
              margin: const EdgeInsets.all(4),
              height: 46,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(14),
                boxShadow: [
                  BoxShadow(
                    color: Color(0x118F80F9),
                    blurRadius: 7,
                    offset: Offset(0, 4),
                  ),
                ],
              ),
              child: Row(
                children: [
                  SizedBox(width: 14),
                  Icon(icons['water'], color: pointGreen, size: 22),
                  SizedBox(width: 13),
                  Text(
                    '물',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: pointGreen, //Colors.black,
                      fontSize: 16,
                    ),
                  ),
                  Spacer(),
                  Text(
                    '$cups컵',
                    style: TextStyle(
                      color: pointGreen, //Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 17,
                    ),
                  ),
                  SizedBox(width: 14),
                ],
              ),
            ),
          ],
        ),
      );
    }

    if (mealType == 'sleep') {
      double hours =
          (foods.isNotEmpty ? (foods.first['sleep_hours'] ?? 0.0) : 0.0);
      return Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        child: Stack(
          children: [
            // 그라데이션 테두리
            ClipRRect(
              borderRadius: BorderRadius.circular(18),
              child: Container(
                height: 54,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                ),
              ),
            ),
            // 흰색 내부 카드
            Container(
              margin: const EdgeInsets.all(4),
              height: 46,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(14),
                boxShadow: [
                  BoxShadow(
                    color: Color(0x118F80F9),
                    blurRadius: 7,
                    offset: Offset(0, 4),
                  ),
                ],
              ),
              child: Row(
                children: [
                  SizedBox(width: 14),
                  Icon(icons['sleep'], color: pointGreen, size: 22),
                  SizedBox(width: 13),
                  Text(
                    '수면',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: pointGreen, //Colors.black,
                      fontSize: 16,
                    ),
                  ),
                  Spacer(),
                  Text(
                    '${hours.toStringAsFixed(1)}시간',
                    style: TextStyle(
                      color: pointGreen, //Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 17,
                    ),
                  ),
                  SizedBox(width: 14),
                ],
              ),
            ),
          ],
        ),
      );
    }

    // 식사 카드 - 그라데이션 테두리, 점수 Container
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: Stack(
        children: [
          // 1. 바깥 그라데이션 테두리 (ClipRRect로 꼭 잘라줘야 함!)
          ClipRRect(
            borderRadius: BorderRadius.circular(18),
            child: Container(
              height: 66,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
          ),
          // 2. 안쪽 흰색 카드 (margin: 2~3, 꼭 radius 동일하게!)
          Container(
            margin: const EdgeInsets.all(4), // 테두리 두께
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(14), // 위와 동일!
            ),
            child: Theme(
              data: Theme.of(context).copyWith(
                dividerColor: Colors.transparent,
                splashColor: pointGreen.withOpacity(0.1),
                colorScheme: Theme.of(
                  context,
                ).colorScheme.copyWith(primary: pointGreen),
              ),
              child: ExpansionTile(
                tilePadding: EdgeInsets.symmetric(horizontal: 14),
                childrenPadding: EdgeInsets.zero,
                leading: Icon(
                  icons[mealType],
                  color: pointGreen.withOpacity(0.85),
                  size: 22,
                ),
                iconColor: pointGreen,
                collapsedIconColor: pointGreen.withOpacity(0.85),
                textColor: pointGreen.withOpacity(0.90),
                title: Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Text(
                      '${_mealKorean(mealType)}',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: pointGreen,
                        fontSize: 16,
                      ),
                    ),
                    SizedBox(width: 10),
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 3,
                      ),
                      decoration: BoxDecoration(
                        color: Color(0xFFB7A9F7),
                        borderRadius: BorderRadius.circular(7),
                      ),
                      child: Text(
                        '$score점',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                          fontSize: 13,
                        ),
                      ),
                    ),
                  ],
                ),
                children:
                    foods.isEmpty
                        ? [
                          ListTile(
                            title: Text(
                              '기록 없음',
                              style: TextStyle(color: Colors.grey),
                            ),
                          ),
                        ]
                        : foods
                            .map(
                              (food) => ListTile(
                                title: Text(
                                  food['name'] ?? '',
                                  style: TextStyle(fontWeight: FontWeight.w600),
                                ),
                                subtitle: Text(
                                  '탄수화물: ${food['carbohydrate_g']}g, 지방: ${food['fat_g']}mg',
                                  style: TextStyle(color: pointGreen),
                                ),
                                leading: Icon(
                                  Icons.eco,
                                  color: pointGreen.withOpacity(0.75),
                                ),
                              ),
                            )
                            .toList(),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mealKorean(String mealType) {
    switch (mealType) {
      case 'breakfast':
        return '아침';
      case 'lunch':
        return '점심';
      case 'dinner':
        return '저녁';
      case 'snack':
        return '간식';
      default:
        return mealType;
    }
  }

  Widget _buildTotalScoreCard(BuildContext context) {
    // 점수 합산 공식 (원하는 대로 바꿔도 됨)
    int totalScore = 0;
    print('allRecords length: ${allRecords.length}');
    print('allRecords: $allRecords');

    for (var food in allRecords) {
      if (food.containsKey('score')) {
        totalScore += (food['score'] as num).toInt();
      } else {
        double carbohydrate = (food['carbohydrate_g'] ?? 0).toDouble();
        double fat = (food['fat_g'] ?? 0).toDouble();
        totalScore += (carbohydrate * 2 + fat * 3).toInt();
      }
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: Stack(
        children: [
          // 그라데이션 테두리
          ClipRRect(
            borderRadius: BorderRadius.circular(18),
            child: Container(
              height: 54,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
          ),
          // 흰색 내부 카드
          Container(
            margin: const EdgeInsets.all(4),
            height: 46,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(14),
              boxShadow: [
                BoxShadow(
                  color: Color(0x118F80F9),
                  blurRadius: 7,
                  offset: Offset(0, 4),
                ),
              ],
            ),
            child: Row(
              children: [
                SizedBox(width: 14),
                Icon(Icons.star, color: pointGreen, size: 22),
                SizedBox(width: 13),
                Text(
                  '전체 건강 점수',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: pointGreen,
                    fontSize: 16,
                  ),
                ),
                Spacer(),
                Text(
                  '$totalScore점',
                  style: TextStyle(
                    color: pointGreen,
                    fontWeight: FontWeight.bold,
                    fontSize: 17,
                  ),
                ),
                SizedBox(width: 14),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

// // ========== 아래는 나머지 탭 예시 ============
//
class PeopleTab extends StatefulWidget {
  @override
  _PeopleTabState createState() => _PeopleTabState();

  final Future<void> Function() onFoodChanged;
  const PeopleTab({super.key, required this.onFoodChanged});
}

class _PeopleTabState extends State<PeopleTab> {
  final TextEditingController _searchController = TextEditingController();
  int selectedTab = 0;
  final bgPurple = const Color(0xFF8F80F9);
  final bgMint = const Color(0xFF5ED593);

  @override
  Widget build(BuildContext context) {
    final height = MediaQuery.of(context).size.height;
    final width = MediaQuery.of(context).size.width;

    // 퍼센트로 간격을 맞춰주기 위한 함수
    double w(double percent) => width * percent / 100;
    double h(double percent) => height * percent / 100;

    return Scaffold(
      // 이 옵션이 상태바(상단바) 흰색 현상 없애줌
      extendBodyBehindAppBar: true,
      backgroundColor: Color(0xFFF9F8FC),
      body: Stack(
        children: [
          SingleChildScrollView(
            physics: BouncingScrollPhysics(),
            child: Column(
              children: [
                // 1. 상단 그라데이션 카드 (완전 동일하게!)
                GradientHeaderCard(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      SizedBox(height: h(1.7)), // 상태바와 내용 여백
                      Text(
                        '저속노화 레시피 검색',
                        style: TextStyle(
                          fontSize: 23,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(height: 9),
                      Text(
                        '느린 발걸음, 같이 시작해봐요!',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w400,
                          color: Colors.white.withOpacity(0.92),
                        ),
                      ),
                    ],
                  ),
                ),

                // 2. 검색창과 탭 사이 여백 (적당히 34~40)
                SizedBox(height: 38),

                // 3. 검색창 (위치 조정 쉬움)
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 24),
                  child: Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          bgPurple.withOpacity(0.11),
                          bgMint.withOpacity(0.11),
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(18),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black12,
                          blurRadius: 8,
                          offset: Offset(0, 3),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: _searchController,
                            style: TextStyle(
                              color: Colors.black,
                              fontWeight: FontWeight.w600,
                              fontSize: 15,
                            ),
                            decoration: InputDecoration(
                              hintText: '검색어 또는 키워드를 입력하세요',
                              hintStyle: TextStyle(
                                color: Colors.black54,
                                fontWeight: FontWeight.w500,
                                fontSize: 14,
                              ),
                              border: InputBorder.none,
                              contentPadding: EdgeInsets.symmetric(
                                horizontal: 18,
                                vertical: 14,
                              ),
                            ),
                            onSubmitted: (query) {
                              if (query.trim().isEmpty) return;
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder:
                                      (_) => RecipeSearchResultPage(
                                        query: query,
                                        onFoodChanged: widget.onFoodChanged,
                                      ),
                                ),
                              );
                            },
                          ),
                        ),
                        Padding(
                          padding: EdgeInsets.only(right: 14),
                          child: GestureDetector(
                            onTap: () {
                              final query = _searchController.text.trim();
                              if (query.isEmpty) return;
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (_) {
                                    print('🚀 RecipeSearchResultPage 호출됨');
                                    print(
                                      '📡 onFoodChanged is null? → ${widget.onFoodChanged == null}',
                                    );
                                    return RecipeSearchResultPage(
                                      query: query,
                                      onFoodChanged: widget.onFoodChanged,
                                    );
                                  },
                                ),
                              );
                            },
                            child: Icon(
                              Icons.search,
                              color: bgPurple,
                              size: 26,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),

                // 4. 검색창~탭바 여백
                SizedBox(height: 22),

                // 5. 추천/최근검색어 탭바
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 16),
                  child: Container(
                    height: 42,
                    decoration: BoxDecoration(
                      color: Color(0xFFEFEFEF),
                      borderRadius: BorderRadius.circular(22),
                    ),
                    child: Stack(
                      children: [
                        AnimatedAlign(
                          alignment:
                              selectedTab == 0
                                  ? Alignment.centerLeft
                                  : Alignment.centerRight,
                          duration: Duration(milliseconds: 220),
                          child: Container(
                            width: (width - 32) / 2,
                            height: 42,
                            decoration: BoxDecoration(
                              gradient: LinearGradient(
                                colors: [bgPurple, bgMint],
                                begin: Alignment.centerLeft,
                                end: Alignment.centerRight,
                              ),
                              borderRadius: BorderRadius.circular(22),
                            ),
                          ),
                        ),
                        Row(
                          children: [
                            Expanded(
                              child: GestureDetector(
                                onTap: () => setState(() => selectedTab = 0),
                                child: Container(
                                  height: 42,
                                  alignment: Alignment.center,
                                  color: Colors.transparent,
                                  child: Text(
                                    "추천 검색어",
                                    style: TextStyle(
                                      fontWeight: FontWeight.w600,
                                      fontSize: 15,
                                      color:
                                          selectedTab == 0
                                              ? Colors.white
                                              : Color(0xFFADADAD),
                                      fontFamily: 'Pretendard',
                                    ),
                                  ),
                                ),
                              ),
                            ),
                            Expanded(
                              child: GestureDetector(
                                onTap: () => setState(() => selectedTab = 1),
                                child: Container(
                                  height: 42,
                                  alignment: Alignment.center,
                                  color: Colors.transparent,
                                  child: Text(
                                    "최근 본 레시피",
                                    style: TextStyle(
                                      fontWeight: FontWeight.w600,
                                      fontSize: 15,
                                      color:
                                          selectedTab == 1
                                              ? Colors.white
                                              : Color(0xFFADADAD),
                                      fontFamily: 'Pretendard',
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),

                // 6. 탭 아래 여백
                SizedBox(height: 14),

                // 7. 탭 컨텐츠(키워드 or 최근 레시피)
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 5, vertical: 8),
                  child:
                      selectedTab == 0
                          ? FutureBuilder<List<String>>(
                            future: getKeywords(), // ← 여기를 실시간 함수로!
                            builder: (context, snapshot) {
                              if (!snapshot.hasData) {
                                return Center(
                                  child: CircularProgressIndicator(),
                                );
                              }
                              final keywords = snapshot.data!;
                              return Wrap(
                                spacing: 12,
                                runSpacing: 10,
                                children:
                                    keywords
                                        .map(
                                          (keyword) =>
                                              gradientBorderTag(keyword),
                                        )
                                        .toList(),
                              );
                            },
                          )
                          : Center(
                            child: Text(
                              "최근 본 레시피가 여기에 표시됩니다.",
                              style: TextStyle(
                                color: Color(0xFF555555),
                                fontSize: 14,
                              ),
                            ),
                          ),
                ),

                SizedBox(height: 30), // 하단 여백
              ],
            ),
          ),
          // 상태바 배경 하얗게 안 나오게 해주는 SafeArea (필요하면 주석)
          // SafeArea(top: false, child: Container()),
        ],
      ),
    );
  }
}

//
// ///// 마이페이지 /////
// class MyTab extends StatefulWidget {
//   final String nickname;
//   final VoidCallback onNicknameChanged;
//
//   MyTab({required this.nickname, required this.onNicknameChanged});
//   @override
//   State<MyTab> createState() => _MyTabState();
// }
//
// class _MyTabState extends State<MyTab> {
//   String? email;
//
//   Future<void> _loadEmail() async {
//     String? loadedEmail = await StorageHelper.getUserEmail();
//     setState(() {
//       email = loadedEmail;
//     });
//   }
//
//   @override
//   void initState() {
//     super.initState();
//     _loadEmail();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     double h(double percent) =>
//         MediaQuery.of(context).size.height * percent / 100;
//
//     final gradient = LinearGradient(
//       colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
//       begin: Alignment.topLeft,
//       end: Alignment.bottomRight,
//     );
//
//     return Scaffold(
//       backgroundColor: Color(0xFFF8F9FA),
//       body: SafeArea(
//         child: SingleChildScrollView(
//           child: Column(
//             children: [
//               SizedBox(height: h(3.5)),
//               Center(
//                 child: Text(
//                   "마이페이지",
//                   style: TextStyle(
//                     color: Colors.black,
//                     fontSize: h(2.0) + 10,
//                     fontWeight: FontWeight.bold,
//                     fontFamily: 'Pretendard',
//                   ),
//                 ),
//               ),
//               SizedBox(height: h(3.0)),
//               CircleAvatar(
//                 radius: h(5),
//                 backgroundImage: AssetImage('assets/icon/avatar.png'),
//               ),
//               SizedBox(height: h(3.0)),
//               Stack(
//                 alignment: Alignment.center,
//                 children: [
//                   // 닉네임 중앙 정렬
//                   Center(
//                     child: Text(
//                       widget.nickname,
//                       style: TextStyle(
//                         fontSize: h(2.0) + 6,
//                         fontWeight: FontWeight.bold,
//                         color: Colors.black,
//                         fontFamily: 'Pretendard',
//                       ),
//                     ),
//                   ),
//                   // 닉네임 오른쪽 꺾쇠 (chevron)
//                   Center(
//                     child: GestureDetector(
//                       onTap: () {
//                         Navigator.push(
//                           context,
//                           MaterialPageRoute(
//                             builder:
//                                 (_) => ProfileEdit(
//                               nickname: widget.nickname,
//                               email: email ?? '이메일 없음',
//                               onNicknameChanged: widget.onNicknameChanged,
//                             ),
//                           ),
//                         );
//                       },
//                       child: Container(
//                         alignment: Alignment.center,
//                         child: Row(
//                           mainAxisSize: MainAxisSize.min,
//                           children: [
//                             Text(
//                               widget.nickname,
//                               style: TextStyle(
//                                 fontSize: h(2.0) + 6,
//                                 fontWeight: FontWeight.bold,
//                                 color: Colors.transparent,
//                                 fontFamily: 'Pretendard',
//                               ),
//                             ),
//                             SizedBox(width: 30),
//                             Transform.translate(
//                               offset: Offset(0, 2),
//                               child: SvgPicture.asset(
//                                 'assets/icon/angle_bracket.svg',
//                                 width: 30,
//                                 height: 30,
//                                 color: Colors.black,
//                               ),
//                             ),
//                           ],
//                         ),
//                       ),
//                     ),
//                   ),
//                 ],
//               ),
//               Text(
//                 email ?? '이메일 없음',
//                 style: TextStyle(
//                   color: Color(0xFF9EA5AD),
//                   fontSize: h(1.6) + 5,
//                   fontFamily: 'Pretendard',
//                 ),
//               ),
//
//               SizedBox(height: h(3)),
//               Padding(
//                 padding: EdgeInsets.symmetric(horizontal: 22),
//                 child: Row(
//                   mainAxisAlignment: MainAxisAlignment.spaceAround,
//                   children: [
//                     _gradientIconWithLabel(
//                       gradient: gradient,
//                       icon: Icons.bookmark_border,
//                       label: '북마크',
//                       iconSize: h(2.2) + 13,
//                       circleSize: h(3.5) + 28,
//                       fontSize: h(0.8) + 11,
//                       onTap: () {
//                         Navigator.push(
//                           context,
//                           MaterialPageRoute(
//                             builder: (context) => BookMarkPage(),
//                           ),
//                         );
//                       },
//                     ),
//                     _gradientIconWithLabel(
//                       gradient: gradient,
//                       icon: Icons.card_giftcard,
//                       label: '이벤트',
//                       iconSize: h(2.2) + 13,
//                       circleSize: h(3.5) + 28,
//                       fontSize: h(0.8) + 11,
//                       onTap: () {
//                         Navigator.push(
//                           context,
//                           MaterialPageRoute(builder: (context) => EventPage()),
//                         );
//                       },
//                     ),
//                     _gradientIconWithLabel(
//                       gradient: gradient,
//                       icon: Icons.campaign_outlined,
//                       label: '공지사항',
//                       iconSize: h(2.2) + 13,
//                       circleSize: h(3.5) + 28,
//                       fontSize: h(0.8) + 11,
//                       onTap: () {
//                         Navigator.push(
//                           context,
//                           MaterialPageRoute(builder: (context) => NoticePage()),
//                         );
//                       },
//                     ),
//                   ],
//                 ),
//               ),
//               SizedBox(height: h(5)),
//               // 하단 메뉴 반응형 & 간격 넉넉하게
//               _settingTile(
//                 icon: Icons.notifications_none,
//                 label: "알림",
//                 trailing: Switch(value: false, onChanged: (v) {}),
//                 iconColor: Color(0xFF8F80F9),
//                 contentPadding: EdgeInsets.symmetric(horizontal: h(3.5) + 10),
//                 fontSize: h(1.0) + 12,
//                 iconSize: h(2.0) + 12,
//               ),
//               Divider(height: h(2.3), thickness: 1, color: Color(0xFFF2F2F5)),
//               _settingTile(
//                 icon: Icons.info_outline,
//                 label: "고객센터",
//                 iconColor: Color(0xFF8F80F9),
//                 contentPadding: EdgeInsets.symmetric(horizontal: h(3.5) + 10),
//                 fontSize: h(1.0) + 12,
//                 iconSize: h(2.0) + 12,
//                 onTap: () {
//                   Navigator.push(
//                     context,
//                     MaterialPageRoute(
//                       builder: (context) => QnAPage(),
//                     ), // QnAPage는 Q&A.dart에서 import!
//                   );
//                 },
//               ),
//               Divider(height: h(2.3), thickness: 1, color: Color(0xFFF2F2F5)),
//               _settingTile(
//                 icon: Icons.description_outlined,
//                 label: "약관 확인",
//                 iconColor: Color(0xFF8F80F9),
//                 contentPadding: EdgeInsets.symmetric(horizontal: h(3.5) + 10),
//                 fontSize: h(1.0) + 12,
//                 iconSize: h(2.0) + 12,
//               ),
//               Divider(height: h(2.3), thickness: 1, color: Color(0xFFF2F2F5)),
//               _settingTile(
//                 icon: Icons.logout,
//                 label: "로그아웃",
//                 iconColor: Colors.redAccent,
//                 contentPadding: EdgeInsets.symmetric(horizontal: h(3.5) + 10),
//                 fontSize: h(1.0) + 12,
//                 iconSize: h(2.0) + 12,
//                 onTap: () {
//                   showDialog(
//                     context: context,
//                     barrierDismissible: true,
//                     builder: (ctx) => buildLogoutDialog(ctx),
//                   );
//                 },
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }
//
//   Widget _gradientIconWithLabel({
//     required LinearGradient gradient,
//     required IconData icon,
//     required String label,
//     double iconSize = 28,
//     double circleSize = 54,
//     double fontSize = 14,
//     VoidCallback? onTap, // << 추가!
//   }) {
//     return GestureDetector(
//       onTap: onTap,
//       child: Column(
//         children: [
//           Container(
//             width: circleSize,
//             height: circleSize,
//             decoration: BoxDecoration(
//               shape: BoxShape.circle,
//               gradient: gradient,
//             ),
//             child: Center(
//               child: Icon(icon, color: Colors.white, size: iconSize),
//             ),
//           ),
//           SizedBox(height: 7),
//           Text(
//             label,
//             style: TextStyle(
//               fontSize: fontSize,
//               color: Color(0xFF33373C),
//               fontFamily: 'Pretendard',
//             ),
//           ),
//         ],
//       ),
//     );
//   }
//
//   Widget _settingTile({
//     required IconData icon,
//     required String label,
//     Widget? trailing,
//     Color iconColor = const Color(0xFF5ED593),
//     EdgeInsets contentPadding = const EdgeInsets.symmetric(
//       horizontal: 40,
//       vertical: 3,
//     ),
//     double fontSize = 18,
//     double iconSize = 26,
//     VoidCallback? onTap,
//   }) {
//     return ListTile(
//       leading: Icon(icon, color: iconColor, size: iconSize),
//       title: Text(
//         label,
//         style: TextStyle(
//           fontSize: fontSize,
//           color: Color(0xFF23252C),
//           fontWeight: FontWeight.w500,
//           fontFamily: 'Pretendard',
//         ),
//       ),
//       trailing: trailing,
//       dense: false,
//       contentPadding: contentPadding,
//       horizontalTitleGap: 17,
//       minLeadingWidth: 0,
//       minVerticalPadding: 8,
//       onTap: onTap,
//     );
//   }
//
//   Widget buildLogoutDialog(BuildContext context) {
//     return Dialog(
//       backgroundColor: Colors.transparent,
//       elevation: 0,
//       insetPadding: EdgeInsets.symmetric(horizontal: 24, vertical: 24),
//       child: Container(
//         width: 300,
//         decoration: BoxDecoration(
//           color: Colors.white,
//           borderRadius: BorderRadius.circular(8),
//         ),
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             // 텍스트 영역
//             Padding(
//               padding: const EdgeInsets.fromLTRB(24, 28, 24, 16),
//               child: Column(
//                 children: [
//                   Text(
//                     '로그아웃',
//                     textAlign: TextAlign.center,
//                     style: TextStyle(
//                       color: Colors.black,
//                       fontSize: 22,
//                       fontFamily: 'Inter',
//                       fontWeight: FontWeight.w700,
//                     ),
//                   ),
//                   SizedBox(height: 10),
//                   Text(
//                     '로그아웃 하시겠습니까?',
//                     textAlign: TextAlign.center,
//                     style: TextStyle(
//                       color: Colors.black,
//                       fontSize: 15,
//                       fontFamily: 'Roboto',
//                       fontWeight: FontWeight.w400,
//                       letterSpacing: 0.5,
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             Divider(height: 1, thickness: 1, color: Color(0xFFE0E0E0)),
//             // 버튼 영역
//             Row(
//               children: [
//                 Expanded(
//                   child: GestureDetector(
//                     onTap: () => Navigator.pop(context), // 취소
//                     child: Container(
//                       height: 48,
//                       decoration: BoxDecoration(
//                         color: Color(0xFFB9B9B9),
//                         borderRadius: BorderRadius.only(
//                           bottomLeft: Radius.circular(8),
//                         ),
//                       ),
//                       child: Center(
//                         child: Text(
//                           '취소',
//                           style: TextStyle(
//                             color: Colors.white,
//                             fontSize: 17,
//                             fontWeight: FontWeight.w500,
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//                 ),
//                 Expanded(
//                   child: GestureDetector(
//                     onTap: () async {
//                       // 로그아웃 처리
//                       await StorageHelper.deleteUserId();
//
//                       // 필요하다면 추가적으로 storage 내용 전부 삭제하고 싶으면
//                       // await StorageHelper.clearAll(); // clearAll 메서드 만들어도 됨
//
//                       // 로그인(혹은 시작) 화면으로 이동 (예시: LoginTestPage)
//                       Navigator.of(context).pushAndRemoveUntil(
//                         MaterialPageRoute(
//                           builder: (context) => SignupTestPage(),
//                         ), // 로그인 화면 import 필요!
//                             (route) => false,
//                       );
//                     },
//                     child: Container(
//                       height: 48,
//                       decoration: BoxDecoration(
//                         gradient: LinearGradient(
//                           colors: [
//                             Color(0xFF8F80F9), // 연보라
//                             Color(0xFF5ED593), // 민트
//                           ],
//                           begin: Alignment.centerLeft,
//                           end: Alignment.centerRight,
//                         ),
//                         borderRadius: BorderRadius.only(
//                           bottomRight: Radius.circular(8),
//                         ),
//                       ),
//                       child: Center(
//                         child: Text(
//                           '확인',
//                           style: TextStyle(
//                             color: Colors.white,
//                             fontSize: 17,
//                             fontWeight: FontWeight.w500,
//                           ),
//                         ),
//                       ),
//                     ),
//                   ),
//                 ),
//               ],
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }
// ////////////////////////// 마이페이지 끝 /////////////////////
//
// UI 관련
class _GradientBorderPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint =
        Paint()
          ..shader = LinearGradient(
            colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
            begin: Alignment.centerLeft,
            end: Alignment.centerRight,
          ).createShader(Rect.fromLTWH(0, 0, size.width, size.height))
          ..style = PaintingStyle.stroke
          ..strokeWidth = borderWidth; // 동일 변수 사용!

    final RRect rRect = RRect.fromRectAndRadius(
      Rect.fromLTWH(
        borderWidth / 2,
        borderWidth / 2,
        size.width - borderWidth,
        size.height - borderWidth,
      ),
      Radius.circular(cardRadius),
    );
    canvas.drawRRect(rRect, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}

// 위의 상단 그라데이션 카드 관련 디자인
class GradientHeaderCard extends StatelessWidget {
  final Widget child;

  const GradientHeaderCard({required this.child, Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final height = MediaQuery.of(context).size.height;
    return Container(
      width: double.infinity,
      padding: EdgeInsets.only(
        top: height * 0.06, // 7% 비율로 항상 똑같음
        bottom: 30,
        left: 28,
        right: 28,
      ),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.vertical(bottom: Radius.circular(30)),
        boxShadow: [
          BoxShadow(
            color: Color(0x168F80F9),
            blurRadius: 18,
            offset: Offset(0, 7),
          ),
        ],
      ),
      child: child,
    );
  }
}

// 해시태크 박스 디자인
Widget gradientBorderTag(String text, {double borderRadius = 16}) {
  return Stack(
    alignment: Alignment.center,
    children: [
      // 바깥: 그라데이션
      Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF8F80F9), Color(0xFF5ED593)], // 연보라-민트
            begin: Alignment.centerLeft,
            end: Alignment.centerRight,
          ),
          borderRadius: BorderRadius.circular(borderRadius),
        ),
        // border width만큼 padding
        padding: EdgeInsets.symmetric(horizontal: 2, vertical: 2),
        child: Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(borderRadius - 1.5),
          ),
          padding: EdgeInsets.symmetric(horizontal: 16, vertical: 7),
          child: Text(
            text,
            style: TextStyle(
              fontSize: 13,
              fontWeight: FontWeight.w500,
              color: Color(0xFF49454F),
              fontFamily: 'Pretendard',
            ),
          ),
        ),
      ),
    ],
  );
}

final double cardRadius = 22.0;
final double borderWidth = 4.0;
