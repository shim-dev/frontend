import 'package:capstone_trial_01/DB_helper.dart';
import 'package:capstone_trial_01/breakfast_log.dart';
import 'package:capstone_trial_01/dinner_log.dart';
import 'package:capstone_trial_01/lunch_log.dart';
import 'package:capstone_trial_01/search_screen_bf.dart';
import 'package:capstone_trial_01/search_screen_din.dart';
import 'package:capstone_trial_01/search_screen_ln.dart';
import 'package:capstone_trial_01/search_screen_snack.dart';
import 'package:capstone_trial_01/snack_log.dart';
import 'package:capstone_trial_01/splash_screen.dart'; // ÎÇòÏ§ëÏóê ÏàòÏ†ï
import 'package:capstone_trial_01/water_log.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:capstone_trial_01/mypage.dart';

import 'sleep_log.dart'; // ÌååÏùº Í≤ΩÎ°úÏóê ÎßûÍ≤å

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await initializeDateFormatting('ko_KR', null);
  runApp(const AppRoot());
}

class AppRoot extends StatelessWidget {
  const AppRoot({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: SplashScreen(), // Ïï± ÏãúÏûëÏãú Splash ÌôîÎ©¥!
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      debugShowCheckedModeBanner: false,
    );
  }
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
  const FigmaToCodeApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ExampleScreen(),
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
    );
  }
}

class ExampleScreen extends StatefulWidget {
  @override
  _ExampleScreenState createState() => _ExampleScreenState();
}

class _ExampleScreenState extends State<ExampleScreen> {
  // Ï∫òÎ¶∞Îçî Í¥ÄÎ†® Î™®Ïùå //
  DateTime _selectedDay = DateTime.now();

  Map<String, List<Map<String, dynamic>>> _dailyFoods = {
    'breakfast': [],
    'lunch': [],
    'dinner': [],
    'snack': [],
  };

  Map<String, int> _scores = {
    'breakfast': 0,
    'lunch': 0,
    'dinner': 0,
    'snack': 0,
  };

  /////////// Ïã§ÌóòÏã§ Ïã§ÌóòÏã§ Ïã§ÌóòÏã§ ///////////

  // Ï†ÑÏ≤¥ ÏùåÏãù Ï†êÏàò
  List<Map<String, dynamic>> _allRecords = [];
  Future<void> fetchAllRecords() async {
    final records = await DBHelper.getAllRecords();
    print('üü¢ fetchAllRecords() Î∞õÏùÄ records: $records');
    setState(() {
      _allRecords = records;
    });
  }

  Future<int> fetchTotalScore() async {
    final allRecords = await DBHelper.getAllRecords();
    int totalScore = 0;
    for (var food in allRecords) {
      double fiber = (food['fiber_g'] ?? 0).toDouble();
      double calcium = (food['calcium_mg'] ?? 0).toDouble();
      totalScore += (fiber * 2 + calcium * 3).toInt();
    }
    return totalScore;
  }
  /////////// Ïã§ÌóòÏã§ Ïã§ÌóòÏã§ Ïã§ÌóòÏã§ ///////////

  Future<void> fetchCalendarFoods(DateTime day) async {
    String formattedDate =
        '${day.year}.${day.month.toString().padLeft(2, '0')}.${day.day.toString().padLeft(2, '0')}';
    Map<String, List<Map<String, dynamic>>> newFoods = {};
    Map<String, int> newScores = {};

    for (var mealType in ['breakfast', 'lunch', 'dinner', 'snack']) {
      final foods = await DBHelper.getRecordsByDate(mealType, formattedDate);
      newFoods[mealType] = foods;
      int score = 0;
      for (var food in foods) {
        double fiber = (food['fiber_g'] ?? 0).toDouble();
        double calcium = (food['calcium_mg'] ?? 0).toDouble();
        score += (fiber * 2 + calcium * 3).toInt();
      }
      newScores[mealType] = score;
    }
    int waterCups = await DBHelper.getWaterCups(formattedDate);
    newFoods['water'] = [
      {'water_cups': waterCups},
    ];

    // 3) ÏàòÎ©¥ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
    double sleepHours = await DBHelper.getSleep(formattedDate);
    newFoods['sleep'] = [
      {'sleep_hours': sleepHours},
    ];
    setState(() {
      _dailyFoods = newFoods;
      _scores = newScores;
    });
  }

  void _onDayChanged(DateTime selected) async {
    _selectedDay = selected;
    await fetchCalendarFoods(selected);
    setState(() {});
  }

  // HomeTabÏóêÏÑú ÏùåÏãù Î≥ÄÍ≤Ω ÌõÑ Ïã§ÌñâÌï† ÏΩúÎ∞±!
  Future<void> onFoodChanged() async {
    print('üì¢ onFoodChanged Ìò∏Ï∂úÎê®!');
    await fetchCalendarFoods(_selectedDay);
    await fetchAllRecords(); // Ï∫òÎ¶∞Îçî Í∞±Ïã†
    setState(() {});
  }

  /////////////////////////////

  int _selectedIndex = 0;
  ValueNotifier<int> breakfastScore = ValueNotifier<int>(0);
  ValueNotifier<int> lunchScore = ValueNotifier<int>(0);
  ValueNotifier<int> dinnerScore = ValueNotifier<int>(0);
  ValueNotifier<int> snackScore = ValueNotifier<int>(0);

  @override
  void initState() {
    super.initState();
    calculateScoresFromDB();
    fetchCalendarFoods(_selectedDay);
    fetchAllRecords();
  }

  Future<void> calculateScoresFromDB() async {
    // ÏïÑÏπ®
    List<Map<String, dynamic>> breakfastFoods = await DBHelper.getRecords1(
      'breakfast',
    );
    int bfScore = 0;
    for (var food in breakfastFoods) {
      double fiber = (food['fiber_g'] ?? 0).toDouble();
      double calcium = (food['calcium_mg'] ?? 0).toDouble();
      bfScore += (fiber * 2 + calcium * 3).toInt();
    }
    breakfastScore.value = bfScore;

    // Ï†êÏã¨
    List<Map<String, dynamic>> lunchFoods = await DBHelper.getRecords1('lunch');
    int lnScore = 0;
    for (var food in lunchFoods) {
      double fiber = (food['fiber_g'] ?? 0).toDouble();
      double calcium = (food['calcium_mg'] ?? 0).toDouble();
      lnScore += (fiber * 2 + calcium * 3).toInt();
    }
    lunchScore.value = lnScore;

    // Ï†ÄÎÖÅ
    List<Map<String, dynamic>> dinnerFoods = await DBHelper.getRecords1(
      'dinner',
    );
    int dnScore = 0;
    for (var food in dinnerFoods) {
      double fiber = (food['fiber_g'] ?? 0).toDouble();
      double calcium = (food['calcium_mg'] ?? 0).toDouble();
      dnScore += (fiber * 2 + calcium * 3).toInt();
    }
    dinnerScore.value = dnScore;

    // Í∞ÑÏãù
    List<Map<String, dynamic>> snackFoods = await DBHelper.getRecords1('snack');
    int snScore = 0;
    for (var food in snackFoods) {
      double fiber = (food['fiber_g'] ?? 0).toDouble();
      double calcium = (food['calcium_mg'] ?? 0).toDouble();
      snScore += (fiber * 2 + calcium * 3).toInt();
    }
    snackScore.value = snScore;
  }

  void _onItemTapped(int idx) => setState(() => _selectedIndex = idx);

  @override
  Widget build(BuildContext context) {
    List<Widget> _pages = [
      HomeTab(
        breakfastScore: breakfastScore,
        lunchScore: lunchScore,
        dinnerScore: dinnerScore,
        snackScore: snackScore,
        calculateScoresFromDB: calculateScoresFromDB,
        parentSetState: () => setState(() {}),
        onFoodChanged: onFoodChanged,
      ),
      CalendarTab(
        selectedDay: _selectedDay,
        dailyFoods: _dailyFoods,
        scores: _scores,
        onDayChanged: _onDayChanged,
        allRecords: _allRecords,
      ),
      PeopleTab(),
      MyTab(),
    ];

    return Scaffold(
      backgroundColor: Colors.white,
      body: IndexedStack(index: _selectedIndex, children: _pages),
      bottomNavigationBar: _buildBottomNavigation(),
    );
  }

  Widget _buildBottomNavigation() {
    List<String> icons = [
      'assets/icon/icon_home.svg',
      'assets/icon/calender.svg',
      'assets/icon/icon_people.svg',
      'assets/icon/icon_my.svg',
    ];
    return Container(
      height: 75,
      padding: EdgeInsets.symmetric(horizontal: 40),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Color(0x3F000000),
            blurRadius: 20,
            offset: Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: List.generate(icons.length, (index) {
          return InkWell(
            onTap: () => _onItemTapped(index),
            child: SvgPicture.asset(
              icons[index],
              width: 30,
              height: 30,
              colorFilter: ColorFilter.mode(
                _selectedIndex == index ? Color(0xFF0A8356) : Color(0xFFBDBDBD),
                BlendMode.srcIn,
              ),
            ),
          );
        }),
      ),
    );
  }
}

// ================= HomeTab ÏúÑÏ†Ø (Í∏∞Ï°¥ UI Ï†ÑÏ≤¥ Î≥µÎ∂ô) ===================
class HomeTab extends StatefulWidget {
  final ValueNotifier<int> breakfastScore;
  final ValueNotifier<int> lunchScore;
  final ValueNotifier<int> dinnerScore;
  final ValueNotifier<int> snackScore;
  final Future<void> Function() calculateScoresFromDB;
  final VoidCallback parentSetState;
  final Future<void> Function() onFoodChanged;

  const HomeTab({
    required this.breakfastScore,
    required this.lunchScore,
    required this.dinnerScore,
    required this.snackScore,
    required this.calculateScoresFromDB,
    required this.parentSetState,
    required this.onFoodChanged,
  });

  @override
  State<HomeTab> createState() => _HomeTabState();
}

class _HomeTabState extends State<HomeTab> {
  int waterCups = 0;
  double _sleepHours = 0.0;

  @override
  void initState() {
    super.initState();
    _loadWaterCups();
    _loadTodaySleep();
  }

  Future<void> _loadWaterCups() async {
    final cups = await DBHelper.getTodayCups();
    setState(() {
      waterCups = cups;
    });
  }

  void _showWaterDialog() async {
    final selected = await showDialog<int>(
      context: context,
      builder:
          (_) => WaterIntakeDialog(
            initialCups: waterCups,
            onSaved: (value) async {
              await DBHelper.saveWaterCups(value);
            },
          ),
    );
    if (selected != null) {
      setState(() {
        waterCups = selected;
      });
      await widget.onFoodChanged();
    }
  }

  void _loadTodaySleep() async {
    DateTime today = DateTime.now();
    String formattedDate =
        '${today.year}.${today.month.toString().padLeft(2, '0')}.${today.day.toString().padLeft(2, '0')}';
    double hours = await DBHelper.getSleep(formattedDate);
    setState(() {
      _sleepHours = hours;
    });
  }

  void _showSleepDialog() async {
    DateTime today = DateTime.now();
    String formattedDate =
        '${today.year}.${today.month.toString().padLeft(2, '0')}.${today.day.toString().padLeft(2, '0')}';
    await showDialog(
      context: context,
      builder:
          (context) => SleepLogDialog(
            initialHours: _sleepHours,
            onSaved: (val) async {
              setState(() {
                _sleepHours = val;
              });
              await DBHelper.insertOrUpdateSleep(val, formattedDate);
              await widget.onFoodChanged();
            },
          ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;

    return Container(
      color: const Color(0xFFF7F8FC), // Ïó∞Ìïú Í∑∏Î†àÏù¥/ÎØºÌä∏ Î∞∞Í≤Ω
      child: SingleChildScrollView(
        physics: BouncingScrollPhysics(),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // 1. ÏÉÅÎã®Î∂Ä Ìó§Îçî
            Container(
              width: double.infinity,
              padding: EdgeInsets.only(
                top: screenHeight * 0.07,
                bottom: 30,
                left: 28,
                right: 28,
              ),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Color(0xFF8F80F9), Color(0xFF5ED593)], // ÌçºÌîå-ÎØºÌä∏
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.vertical(
                  bottom: Radius.circular(30),
                ),
                boxShadow: [
                  BoxShadow(
                    color: Color(0x168F80F9),
                    blurRadius: 18,
                    offset: Offset(0, 7),
                  ),
                ],
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "Hi, ÌòúÏßÑÎãò!",
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 25,
                          fontWeight: FontWeight.bold,
                          letterSpacing: 0.2,
                        ),
                      ),
                      SizedBox(height: 9),
                      Text(
                        "Ïò§ÎäòÏùò Í±¥Í∞ï Í∏∞Î°ù",
                        style: TextStyle(
                          color: Colors.white.withOpacity(0.92),
                          fontSize: 16,
                          fontWeight: FontWeight.w400,
                          letterSpacing: 0.1,
                        ),
                      ),
                    ],
                  ),
                  CircleAvatar(
                    backgroundColor: Colors.white.withOpacity(0.32),
                    radius: 22,
                    child: Image.asset(
                      'assets/icon/heart_front_color.png',
                      width: 28,
                      height: 28,
                    ),
                  ),
                ],
              ),
            ),

            SizedBox(height: screenHeight * 0.03),

            // 2. Ï†êÏàò Ïπ¥Îìú (3Í∞ú)
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22),
              child: Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(22),
                ),
                color: Colors.white,
                elevation: 2,
                child: Padding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 13,
                    vertical: 17,
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildScoreMini(
                        "ÏïÑÏπ®",
                        "assets/icon/morning.svg",
                        widget.breakfastScore,
                      ),
                      _buildScoreMini(
                        "Ï†êÏã¨",
                        "assets/icon/afternoon.svg",
                        widget.lunchScore,
                      ),
                      _buildScoreMini(
                        "Ï†ÄÎÖÅ",
                        "assets/icon/night.svg",
                        widget.dinnerScore,
                      ),
                    ],
                  ),
                ),
              ),
            ),

            SizedBox(height: screenHeight * 0.024),

            // 3. Î©îÏù∏ Ï†êÏàò Ïù¥ÎØ∏ÏßÄ Î∞ïÏä§
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 26),
              child: Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(28),
                ),
                color: Color(0xFFF2F3FF),
                elevation: 0,
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: 26),
                  child: _buildScoreImageBox(),
                ),
              ),
            ),

            SizedBox(height: screenHeight * 0.024),

            // 4. Î¨º/ÏàòÎ©¥ Ïπ¥Îìú (Î¶¨ÎîîÏûêÏù∏)
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22),
              child: Row(
                children: [
                  Expanded(
                    child: _progressCardMini(
                      'assets/icon/water.svg',
                      '$waterCups/8',
                      _showWaterDialog,
                    ),
                  ),
                  SizedBox(width: 15),
                  Expanded(
                    child: _progressCardMini(
                      'assets/icon/sleep.svg',
                      '${_sleepHours.toStringAsFixed(1)} Hr',
                      _showSleepDialog,
                    ),
                  ),
                ],
              ),
            ),

            SizedBox(height: screenHeight * 0.024),

            // 5. ÏãùÏÇ¨/Í∞ÑÏãù Í∏∞Î°ù Ïπ¥Îìú
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22),
              child: Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(22),
                ),
                color: Colors.white,
                elevation: 1,
                child: Padding(
                  padding: const EdgeInsets.symmetric(
                    vertical: 18,
                    horizontal: 12,
                  ),
                  child: _buildMealCards(context),
                ),
              ),
            ),

            SizedBox(height: screenHeight * 0.021),

            // 6. Í≥µÏßÄ Î∞è Í∏∞ÌÉÄ
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 30),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Í≥µÏßÄÏÇ¨Ìï≠ üì¢',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF22234C),
                    ),
                  ),
                ],
              ),
            ),
            Padding(
              padding: EdgeInsets.symmetric(horizontal: 22, vertical: 6),
              child: Information(),
            ),
            SizedBox(height: 10),
          ],
        ),
      ),
    );
  }

  Widget _buildScoreImageBox() {
    return ValueListenableBuilder<int>(
      valueListenable: widget.breakfastScore,
      builder: (context, bfScore, _) {
        return ValueListenableBuilder<int>(
          valueListenable: widget.lunchScore,
          builder: (context, lnScore, _) {
            return ValueListenableBuilder<int>(
              valueListenable: widget.dinnerScore,
              builder: (context, dnScore, _) {
                double avgScore = (bfScore + lnScore + dnScore) / 3.0;
                String assetPath;
                if (avgScore > 100) {
                  assetPath = 'assets/icon/fish.svg';
                } else if (avgScore > 60) {
                  assetPath = 'assets/icon/carrot.svg';
                } else if (avgScore > 30) {
                  assetPath = 'assets/icon/apple.svg';
                } else {
                  assetPath = 'assets/icon/question01.svg';
                }

                return Container(
                  width: 320,
                  height: 210,
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Center(
                    child: SvgPicture.asset(assetPath, width: 110, height: 110),
                  ),
                );
              },
            );
          },
        );
      },
    );
  }

  Widget _buildScoreMini(
    String label,
    String iconPath,
    ValueNotifier<int> scoreNotifier,
  ) {
    return ValueListenableBuilder<int>(
      valueListenable: scoreNotifier,
      builder: (context, value, _) {
        return Column(
          children: [
            Container(
              width: 38,
              height: 38,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                gradient: LinearGradient(
                  colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: Center(
                child: SvgPicture.asset(
                  iconPath,
                  width: 20,
                  height: 20,
                  color: Colors.white,
                ),
              ),
            ),
            SizedBox(height: 7),
            Text(
              "$value",
              style: TextStyle(
                fontSize: 17,
                fontWeight: FontWeight.w700,
                color: Color(0xFF695ACD),
              ),
            ),
            Text(
              label,
              style: TextStyle(fontSize: 13, color: Color(0xFF999BBC)),
            ),
          ],
        );
      },
    );
  }

  // Ïù¥ Î∂ÄÎ∂ÑÏù¥ ÏÉàÎ°≠Í≤å Î¶¨ÎîîÏûêÏù∏Îêú 'Î¨º/ÏàòÎ©¥' Ïπ¥Îìú!
  Widget _progressCardMini(String icon, String value, VoidCallback onTap) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(18),
      child: Container(
        height: 58,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(18),
          boxShadow: [
            BoxShadow(
              color: Color(0x208F80F9),
              blurRadius: 10,
              offset: Offset(0, 4),
            ),
          ],
        ),
        child: Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SvgPicture.asset(
                icon,
                width: 21,
                height: 21,
                colorFilter: ColorFilter.mode(Colors.white, BlendMode.srcIn),
              ),
              SizedBox(width: 10),
              Text(
                value,
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 17,
                  letterSpacing: 0.5,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildMealCards(BuildContext context) {
    List<Map<String, dynamic>> meals = [
      {
        'icon': 'assets/icon/breakfast.svg',
        'text': 'ÏïÑÏπ®',
        'score': widget.breakfastScore,
        'screen': BreakfastLog(),
        'searchScreen': SearchScreenBf(),
      },
      {
        'icon': 'assets/icon/lunch.svg',
        'text': 'Ï†êÏã¨',
        'score': widget.lunchScore,
        'screen': LunchLog(),
        'searchScreen': SearchScreenLn(),
      },
      {
        'icon': 'assets/icon/dinner.svg',
        'text': 'Ï†ÄÎÖÅ',
        'score': widget.dinnerScore,
        'screen': DinnerLog(),
        'searchScreen': SearchScreenDin(),
      },
      {
        'icon': 'assets/icon/snack.svg',
        'text': 'Í∞ÑÏãù',
        'score': widget.snackScore,
        'screen': SnackLog(),
        'searchScreen': SearchScreenSnack(),
      },
    ];

    return Column(
      children:
          meals
              .map(
                (meal) => Padding(
                  padding: const EdgeInsets.symmetric(vertical: 6),
                  child: _modernMealTile(
                    context,
                    meal['icon']!,
                    meal['text']!,
                    meal['score'],
                    meal['screen'],
                    meal['searchScreen'],
                  ),
                ),
              )
              .toList(),
    );
  }

  // Í≥°Î•† Í∞íÏùÑ ÌïòÎÇòÏùò Î≥ÄÏàòÎ°ú!

  Widget _modernMealTile(
    BuildContext context,
    String icon,
    String text,
    ValueNotifier<int>? scoreNotifier,
    Widget logScreen,
    Widget searchScreen,
  ) {
    return ValueListenableBuilder<int>(
      valueListenable: scoreNotifier!,
      builder: (context, score, _) {
        return GestureDetector(
          onTap: () async {
            // Ïπ¥Îìú Ï†ÑÏ≤¥ ÌÑ∞Ïπò ‚Üí SearchScreen Îã§Ïù¥ÏñºÎ°úÍ∑∏
            await showGeneralDialog(
              context: context,
              barrierDismissible: true,
              barrierLabel: 'Dismiss',
              barrierColor: Colors.black.withOpacity(0.25),
              transitionDuration: Duration(milliseconds: 200),
              pageBuilder: (context, animation, secondaryAnimation) {
                return Builder(
                  builder: (context) {
                    // Í∞Å searchScreen ÌÉÄÏûÖÎ≥Ñ ÏΩúÎ∞± Ïó∞Í≤∞
                    if (searchScreen is SearchScreenBf) {
                      return SearchScreenBf(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else if (searchScreen is SearchScreenLn) {
                      return SearchScreenLn(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else if (searchScreen is SearchScreenDin) {
                      return SearchScreenDin(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else if (searchScreen is SearchScreenSnack) {
                      return SearchScreenSnack(
                        onScoreChanged: () async {
                          await widget.calculateScoresFromDB();
                          widget.parentSetState();
                          await widget.onFoodChanged();
                        },
                      );
                    } else {
                      return searchScreen;
                    }
                  },
                );
              },
            );
          },
          child: Container(
            height: 65,
            margin: EdgeInsets.symmetric(vertical: 3),
            child: CustomPaint(
              painter: _GradientBorderPainter(),
              child: Container(
                margin: EdgeInsets.all(borderWidth),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(cardRadius),
                ),
                child: Row(
                  children: [
                    SizedBox(width: 17),
                    // Ïó∞Î≥¥Îùº ÎèôÍ∑∏ÎùºÎØ∏ + ÌïòÏñÄ svg
                    Container(
                      width: 36,
                      height: 36,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Color(0xFF8F80F9),
                      ),
                      child: Center(
                        child: SvgPicture.asset(
                          icon,
                          width: 22,
                          height: 22,
                          colorFilter: ColorFilter.mode(
                            Colors.white,
                            BlendMode.srcIn,
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 13),
                    Text(
                      text,
                      style: TextStyle(
                        color: Color(0xFF8F80F9),
                        fontSize: 19,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Spacer(),
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: 13,
                        vertical: 6,
                      ),
                      decoration: BoxDecoration(
                        color: Color(0x1A19C188), // Ïó∞Ìïú ÎØºÌä∏, 0x1AÎäî 10% Ìà¨Î™Ö
                        borderRadius: BorderRadius.circular(14),
                      ),
                      child: Text(
                        '$score',
                        style: TextStyle(
                          color: Color(0xFF19C188), // ÏßÑÌïú ÎØºÌä∏
                          fontWeight: FontWeight.w600,
                          fontSize: 17,
                        ),
                      ),
                    ),
                    SizedBox(width: 7),
                    // +Î≤ÑÌäºÎßå Î≥ÑÎèÑ GestureDetector!
                    GestureDetector(
                      behavior: HitTestBehavior.opaque,
                      onTap: () async {
                        // +Î≤ÑÌäº ÌÑ∞Ïπò ‚Üí LogScreen Îã§Ïù¥ÏñºÎ°úÍ∑∏
                        await showGeneralDialog(
                          context: context,
                          barrierDismissible: true,
                          barrierLabel: 'Dismiss',
                          barrierColor: Colors.black.withOpacity(0.25),
                          transitionDuration: Duration(milliseconds: 200),
                          pageBuilder: (
                            context,
                            animation,
                            secondaryAnimation,
                          ) {
                            return Builder(
                              builder: (context) {
                                if (logScreen is BreakfastLog) {
                                  return BreakfastLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else if (logScreen is LunchLog) {
                                  return LunchLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else if (logScreen is DinnerLog) {
                                  return DinnerLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else if (logScreen is SnackLog) {
                                  return SnackLog(
                                    onUpdated: () async {
                                      await widget.calculateScoresFromDB();
                                      widget.parentSetState();
                                      await widget.onFoodChanged();
                                    },
                                    onFoodChanged: () async {
                                      await widget.onFoodChanged();
                                    },
                                  );
                                } else {
                                  return logScreen;
                                }
                              },
                            );
                          },
                        );
                      },
                      child: Container(
                        width: 29,
                        height: 29,
                        decoration: BoxDecoration(
                          color: Color(0xFF19C188),
                          shape: BoxShape.circle,
                          border: Border.all(
                            color: Color(0xFF19C188),
                            width: 2,
                          ),
                        ),
                        child: Center(
                          child: Icon(Icons.add, color: Colors.white, size: 18),
                        ),
                      ),
                    ),
                    SizedBox(width: 13),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  // // 2. ÏïÑÎûòÍ∞Ä Ï†ÑÏ≤¥ _modernMealTile ÏΩîÎìúÏûÖÎãàÎã§! --------------------------- Î≤ÑÏ†Ñ 2
  // Widget _modernMealTile(
  //   BuildContext context,
  //   String iconPath,
  //   String text,
  //   ValueNotifier<int>? scoreNotifier,
  //   Widget logScreen,
  //   Widget searchScreen,
  // ) {
  //   return ValueListenableBuilder<int>(
  //     valueListenable: scoreNotifier!,
  //     builder: (context, score, _) {
  //       return GestureDetector(
  //         // Ïπ¥Îìú Ï†ÑÏ≤¥Î•º ÎàåÎ†ÄÏùÑ Îïå Îã§Ïù¥ÏñºÎ°úÍ∑∏Î°ú SearchScreen
  //         onTap: () async {
  //           await showGeneralDialog(
  //             context: context,
  //             barrierDismissible: true,
  //             barrierLabel: 'Dismiss',
  //             barrierColor: Colors.black.withOpacity(0.5),
  //             transitionDuration: Duration(milliseconds: 300),
  //             pageBuilder: (context, animation, secondaryAnimation) {
  //               return Builder(
  //                 builder: (context) {
  //                   if (searchScreen is SearchScreenBf) {
  //                     return SearchScreenBf(
  //                       onScoreChanged: () async {
  //                         await widget.calculateScoresFromDB();
  //                         widget.parentSetState();
  //                         await widget.onFoodChanged();
  //                       },
  //                     );
  //                   } else if (searchScreen is SearchScreenLn) {
  //                     return SearchScreenLn(
  //                       onScoreChanged: () async {
  //                         await widget.calculateScoresFromDB();
  //                         widget.parentSetState();
  //                         await widget.onFoodChanged();
  //                       },
  //                     );
  //                   } else if (searchScreen is SearchScreenDin) {
  //                     return SearchScreenDin(
  //                       onScoreChanged: () async {
  //                         await widget.calculateScoresFromDB();
  //                         widget.parentSetState();
  //                         await widget.onFoodChanged();
  //                       },
  //                     );
  //                   } else if (searchScreen is SearchScreenSnack) {
  //                     return SearchScreenSnack(
  //                       onScoreChanged: () async {
  //                         await widget.calculateScoresFromDB();
  //                         widget.parentSetState();
  //                         await widget.onFoodChanged();
  //                       },
  //                     );
  //                   } else {
  //                     return searchScreen;
  //                   }
  //                 },
  //               );
  //             },
  //           );
  //         },
  //         // ÏïÑÎûòÍ∞Ä Í∏∞Ï°¥ Ïπ¥Îìú UI
  //         child: CustomPaint(
  //           painter: GradientBorderPainter(),
  //           child: Container(
  //             height: 60,
  //             decoration: BoxDecoration(
  //               color: Colors.white,
  //               borderRadius: BorderRadius.circular(22),
  //             ),
  //             child: Row(
  //               children: [
  //                 SizedBox(width: 17),
  //                 Stack(
  //                   alignment: Alignment.center,
  //                   children: [
  //                     Container(
  //                       width: 36,
  //                       height: 36,
  //                       decoration: BoxDecoration(
  //                         shape: BoxShape.circle,
  //                         gradient: LinearGradient(
  //                           colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
  //                           begin: Alignment.topLeft,
  //                           end: Alignment.bottomRight,
  //                         ),
  //                       ),
  //                     ),
  //                     SvgPicture.asset(
  //                       iconPath,
  //                       width: 20,
  //                       height: 20,
  //                       colorFilter: ColorFilter.mode(
  //                         Colors.white,
  //                         BlendMode.srcIn,
  //                       ),
  //                     ),
  //                   ],
  //                 ),
  //                 SizedBox(width: 13),
  //                 Text(
  //                   text,
  //                   style: TextStyle(
  //                     color: Color(0xFF22234C),
  //                     fontSize: 19,
  //                     fontWeight: FontWeight.bold,
  //                     letterSpacing: 0.1,
  //                   ),
  //                 ),
  //                 Spacer(),
  //                 Container(
  //                   padding: EdgeInsets.symmetric(horizontal: 13, vertical: 6),
  //                   decoration: BoxDecoration(
  //                     color: Colors.white.withOpacity(0.19),
  //                     borderRadius: BorderRadius.circular(14),
  //                   ),
  //                   child: Text(
  //                     '$score',
  //                     style: TextStyle(
  //                       color: Color(0xFF19C188),
  //                       fontWeight: FontWeight.w600,
  //                       fontSize: 17,
  //                       letterSpacing: 0.4,
  //                     ),
  //                   ),
  //                 ),
  //                 SizedBox(width: 7),
  //                 GestureDetector(
  //                   onTap: () async {
  //                     final result = await showGeneralDialog(
  //                       context: context,
  //                       barrierDismissible: true,
  //                       barrierLabel: 'Dismiss',
  //                       barrierColor: Colors.black.withOpacity(0.5),
  //                       transitionDuration: Duration(milliseconds: 300),
  //                       pageBuilder: (context, animation, secondaryAnimation) {
  //                         if (logScreen is BreakfastLog) {
  //                           return BreakfastLog(
  //                             onUpdated: () async {
  //                               await widget.calculateScoresFromDB();
  //                               widget.parentSetState();
  //                             },
  //                             onFoodChanged: () async {
  //                               await widget.onFoodChanged();
  //                             },
  //                           );
  //                         } else if (logScreen is LunchLog) {
  //                           return LunchLog(
  //                             onUpdated: () async {
  //                               await widget.calculateScoresFromDB();
  //                               widget.parentSetState();
  //                               await widget.onFoodChanged();
  //                             },
  //                           );
  //                         } else if (logScreen is DinnerLog) {
  //                           return DinnerLog(
  //                             onUpdated: () async {
  //                               await widget.calculateScoresFromDB();
  //                               widget.parentSetState();
  //                               await widget.onFoodChanged();
  //                             },
  //                           );
  //                         } else if (logScreen is SnackLog) {
  //                           return SnackLog(
  //                             onUpdated: () async {
  //                               await widget.calculateScoresFromDB();
  //                               widget.parentSetState();
  //                               await widget.onFoodChanged();
  //                             },
  //                           );
  //                         } else {
  //                           return logScreen;
  //                         }
  //                       },
  //                     );
  //                     if (result == true) {
  //                       await widget.calculateScoresFromDB();
  //                       widget.parentSetState();
  //                       await widget.onFoodChanged();
  //                     }
  //                   },
  //                   child: Stack(
  //                     alignment: Alignment.center,
  //                     children: [
  //                       Container(
  //                         width: 29,
  //                         height: 29,
  //                         decoration: BoxDecoration(
  //                           shape: BoxShape.circle,
  //                           gradient: LinearGradient(
  //                             colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
  //                             begin: Alignment.topLeft,
  //                             end: Alignment.bottomRight,
  //                           ),
  //                           boxShadow: [
  //                             BoxShadow(
  //                               color: Color(0x33019A5A),
  //                               blurRadius: 5,
  //                               offset: Offset(0, 2),
  //                             ),
  //                           ],
  //                         ),
  //                       ),
  //                       Icon(Icons.add, color: Colors.white, size: 18),
  //                     ],
  //                   ),
  //                 ),
  //                 SizedBox(width: 13),
  //               ],
  //             ),
  //           ),
  //         ),
  //       );
  //     },
  //   );
  // }

  // //Ï†ÑÏ≤¥ Í∑∏ÎùºÎç∞Ïù¥ÏÖò - ÌôîÎ†§...Ìï¥ ----------------- Î≤ÑÏ†Ñ 1
  // Widget _modernMealTile(
  //   BuildContext context,
  //   String iconPath,
  //   String text,
  //   ValueNotifier<int>? scoreNotifier,
  //   Widget logScreen,
  //   Widget searchScreen,
  // ) {
  //   return ValueListenableBuilder<int>(
  //     valueListenable: scoreNotifier!,
  //     builder: (context, score, _) {
  //       return Container(
  //         height: 60,
  //         decoration: BoxDecoration(
  //           borderRadius: BorderRadius.circular(22),
  //           gradient: LinearGradient(
  //             colors: [
  //               Color(0xFF8F80F9).withOpacity(0.85),
  //               Color(0xFF5ED593).withOpacity(0.85),
  //             ],
  //             begin: Alignment.centerLeft,
  //             end: Alignment.centerRight,
  //           ),
  //           boxShadow: [
  //             BoxShadow(
  //               color: Color(0x228F80F9),
  //               blurRadius: 14,
  //               offset: Offset(0, 3),
  //             ),
  //           ],
  //         ),
  //         child: Row(
  //           children: [
  //             SizedBox(width: 17),
  //             Container(
  //               width: 36,
  //               height: 36,
  //               decoration: BoxDecoration(
  //                 shape: BoxShape.circle,
  //                 color: Colors.white,
  //                 boxShadow: [
  //                   BoxShadow(
  //                     color: Colors.white.withOpacity(0.13),
  //                     blurRadius: 5,
  //                     offset: Offset(0, 2),
  //                   ),
  //                 ],
  //               ),
  //               child: Center(
  //                 child: SvgPicture.asset(
  //                   iconPath,
  //                   width: 20,
  //                   height: 20,
  //                   colorFilter: ColorFilter.mode(
  //                     Color(0xFF19C188),
  //                     BlendMode.srcIn,
  //                   ),
  //                 ),
  //               ),
  //             ),
  //             SizedBox(width: 13),
  //             Text(
  //               text,
  //               style: TextStyle(
  //                 color: Colors.white,
  //                 fontSize: 19,
  //                 fontWeight: FontWeight.bold,
  //                 letterSpacing: 0.1,
  //               ),
  //             ),
  //             Spacer(),
  //             Container(
  //               padding: EdgeInsets.symmetric(horizontal: 13, vertical: 6),
  //               decoration: BoxDecoration(
  //                 color: Colors.white.withOpacity(0.19),
  //                 borderRadius: BorderRadius.circular(14),
  //               ),
  //               child: Text(
  //                 '$score',
  //                 style: TextStyle(
  //                   color: Colors.white,
  //                   fontWeight: FontWeight.w600,
  //                   fontSize: 17,
  //                   letterSpacing: 0.4,
  //                 ),
  //               ),
  //             ),
  //             SizedBox(width: 7),
  //             GestureDetector(
  //               onTap: () async {
  //                 final result = await showGeneralDialog(
  //                   context: context,
  //                   barrierDismissible: true,
  //                   barrierLabel: 'Dismiss',
  //                   barrierColor: Colors.black.withOpacity(0.5),
  //                   transitionDuration: Duration(milliseconds: 300),
  //                   pageBuilder: (context, animation, secondaryAnimation) {
  //                     // Í∏∞Ï°¥ ÌîåÎü¨Ïä§ Î≤ÑÌäº ÏΩúÎ∞±(ÏõêÎ≥∏ ÏΩîÎìú Ï∞∏Í≥†)
  //                     if (logScreen is BreakfastLog) {
  //                       return BreakfastLog(
  //                         onUpdated: () async {
  //                           await widget.calculateScoresFromDB();
  //                           widget.parentSetState();
  //                         },
  //                         onFoodChanged: () async {
  //                           await widget.onFoodChanged();
  //                         },
  //                       );
  //                     } else if (logScreen is LunchLog) {
  //                       return LunchLog(
  //                         onUpdated: () async {
  //                           await widget.calculateScoresFromDB();
  //                           widget.parentSetState();
  //                           await widget.onFoodChanged();
  //                         },
  //                       );
  //                     } else if (logScreen is DinnerLog) {
  //                       return DinnerLog(
  //                         onUpdated: () async {
  //                           await widget.calculateScoresFromDB();
  //                           widget.parentSetState();
  //                           await widget.onFoodChanged();
  //                         },
  //                       );
  //                     } else if (logScreen is SnackLog) {
  //                       return SnackLog(
  //                         onUpdated: () async {
  //                           await widget.calculateScoresFromDB();
  //                           widget.parentSetState();
  //                           await widget.onFoodChanged();
  //                         },
  //                       );
  //                     } else {
  //                       return logScreen;
  //                     }
  //                   },
  //                 );
  //                 if (result == true) {
  //                   await widget.calculateScoresFromDB();
  //                   widget.parentSetState();
  //                   await widget.onFoodChanged();
  //                 }
  //               },
  //               child: Container(
  //                 width: 29,
  //                 height: 29,
  //                 decoration: BoxDecoration(
  //                   color: Colors.white,
  //                   shape: BoxShape.circle,
  //                   border: Border.all(color: Color(0xFF19C188), width: 2),
  //                   boxShadow: [
  //                     BoxShadow(
  //                       color: Color(0x33019A5A),
  //                       blurRadius: 5,
  //                       offset: Offset(0, 2),
  //                     ),
  //                   ],
  //                 ),
  //                 child: Center(
  //                   child: Icon(Icons.add, color: Color(0xFF19C188), size: 18),
  //                 ),
  //               ),
  //             ),
  //             SizedBox(width: 13),
  //           ],
  //         ),
  //       );
  //     },
  //   );
  // }

  // Í≥µÏßÄ/Ïä¨ÎùºÏù¥Îìú Ïù∏Ìè¨ Ïπ¥Îìú Í∑∏ÎåÄÎ°ú
  Widget Information() {
    return Container(
      width: 370,
      height: 85,
      decoration: ShapeDecoration(
        color: const Color(0xCCD9D9D9),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(24)),
      ),
      child: Stack(
        alignment: Alignment.center,
        children: [
          Positioned(
            left: 16,
            child: SvgPicture.asset(
              'assets/icon/left_arrow.svg',
              width: 10,
              height: 17,
            ),
          ),
          Positioned(
            right: 16,
            child: SvgPicture.asset(
              'assets/icon/right_arrow.svg',
              width: 10,
              height: 17,
            ),
          ),
          Positioned(
            bottom: 11,
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                SvgPicture.asset('assets/icon/circle.svg', width: 8, height: 8),
                SizedBox(width: 16),
                SvgPicture.asset(
                  'assets/icon/empty_circle.svg',
                  width: 7,
                  height: 7,
                ),
                SizedBox(width: 16),
                SvgPicture.asset(
                  'assets/icon/empty_circle.svg',
                  width: 7,
                  height: 7,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

///////
class CalendarTab extends StatelessWidget {
  final DateTime selectedDay;
  final Map<String, List<Map<String, dynamic>>> dailyFoods;
  final Map<String, int> scores;
  final Function(DateTime) onDayChanged;
  final List<Map<String, dynamic>> allRecords;

  // pointGreenÎèÑ ÌïÑÎìúÎ°ú Ï∂îÍ∞Ä!
  final Color pointGreen;

  const CalendarTab({
    required this.selectedDay,
    required this.dailyFoods,
    required this.scores,
    required this.onDayChanged,
    required this.allRecords,
    this.pointGreen = const Color(0xFF8F80F9), // Í∏∞Î≥∏Í∞í Í∞ÄÎä•
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;

    final calendarHeight = screenHeight * 0.47; // ÏÇ¥Ïßù Ï§ÑÏûÑ

    return Column(
      children: [
        // 1. ÏÉÅÎã® Ìó§Îçî (Îë•Í∑º Í∑∏ÎùºÎç∞Ïù¥ÏÖò Î∞∞Í≤Ω)
        Container(
          width: double.infinity,
          height: screenHeight * 0.16,
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.only(
              bottomLeft: Radius.circular(34),
              bottomRight: Radius.circular(34),
            ),
          ),
          child: SafeArea(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                const SizedBox(height: 12),
                Text(
                  "Ï∫òÎ¶∞Îçî",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 23,
                    fontWeight: FontWeight.w700,
                    letterSpacing: 0.5,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  "${selectedDay.year}ÎÖÑ ${selectedDay.month}Ïõî",
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.88),
                    fontSize: 15,
                    fontWeight: FontWeight.w400,
                  ),
                ),
              ],
            ),
          ),
        ),

        // 2. Ï∫òÎ¶∞Îçî Ïπ¥Îìú (ÎùÑÏõåÏßÑ Ïπ¥Îìú + Ìù∞ÏÉâ, Í∑∏Î¶ºÏûê Ìö®Í≥º)
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(24),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.04),
                blurRadius: 12,
                offset: const Offset(0, 6),
              ),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 7),
            child: TableCalendar(
              locale: 'ko_KR',
              firstDay: DateTime(2024, 1, 1),
              lastDay: DateTime(2030, 12, 31),
              focusedDay: selectedDay,
              selectedDayPredicate: (day) => isSameDay(day, selectedDay),
              onDaySelected: (selected, focused) => onDayChanged(selected),
              rowHeight: calendarHeight * 0.13,
              daysOfWeekHeight: calendarHeight * 0.06,
              calendarStyle: CalendarStyle(
                selectedDecoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  shape: BoxShape.circle,
                ),
                todayDecoration: BoxDecoration(
                  color: pointGreen.withOpacity(0.13),
                  shape: BoxShape.circle,
                ),
                markerDecoration: BoxDecoration(
                  color: pointGreen,
                  shape: BoxShape.circle,
                ),
                defaultTextStyle: TextStyle(
                  color: Colors.grey[900],
                  fontWeight: FontWeight.w600,
                  fontSize: 16,
                ),
                weekendTextStyle: TextStyle(
                  color: Colors.grey[500],
                  fontWeight: FontWeight.w600,
                  fontSize: 16,
                ),
                outsideTextStyle: TextStyle(
                  color: Colors.grey[300],
                  fontWeight: FontWeight.normal,
                  fontSize: 14,
                ),
              ),
              headerStyle: HeaderStyle(
                formatButtonVisible: false,
                titleCentered: true,
                leftChevronIcon: Icon(
                  Icons.chevron_left,
                  color: pointGreen,
                  size: 28,
                ),
                rightChevronIcon: Icon(
                  Icons.chevron_right,
                  color: pointGreen,
                  size: 28,
                ),
                titleTextStyle: TextStyle(
                  color: pointGreen,
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                ),
                headerMargin: const EdgeInsets.only(bottom: 6),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.95),
                  borderRadius: BorderRadius.circular(18),
                ),
              ),
              daysOfWeekStyle: DaysOfWeekStyle(
                weekdayStyle: TextStyle(
                  color: pointGreen,
                  fontWeight: FontWeight.w700,
                  fontSize: 15,
                ),
                weekendStyle: TextStyle(
                  color: Color(0xFF5ED593),
                  fontWeight: FontWeight.w700,
                  fontSize: 15,
                ),
              ),
            ),
          ),
        ),

        // 3. Ïπ¥Îìú Î¶¨Ïä§Ìä∏ (Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú)
        Expanded(
          child: ListView(
            padding: EdgeInsets.zero,
            children: [
              _buildTotalScoreCard(context),

              for (var mealType in [
                'breakfast',
                'lunch',
                'dinner',
                'snack',
                'water',
                'sleep',
              ])
                _buildMealSection(context, mealType),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildMealSection(BuildContext context, String mealType) {
    final foods = dailyFoods[mealType] ?? [];
    final score = scores[mealType] ?? 0;
    final icons = {
      'breakfast': Icons.free_breakfast,
      'lunch': Icons.lunch_dining,
      'dinner': Icons.nights_stay,
      'snack': Icons.cookie,
      'water': Icons.water_drop,
      'sleep': Icons.bedtime,
    };
    if (mealType == 'water') {
      int cups = (foods.isNotEmpty ? (foods.first['water_cups'] ?? 0) : 0);
      return Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        child: Stack(
          children: [
            // Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÌÖåÎëêÎ¶¨
            ClipRRect(
              borderRadius: BorderRadius.circular(18),
              child: Container(
                height: 54,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                ),
              ),
            ),
            // Ìù∞ÏÉâ ÎÇ¥Î∂Ä Ïπ¥Îìú
            Container(
              margin: const EdgeInsets.all(4),
              height: 46,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(14),
                boxShadow: [
                  BoxShadow(
                    color: Color(0x118F80F9),
                    blurRadius: 7,
                    offset: Offset(0, 4),
                  ),
                ],
              ),
              child: Row(
                children: [
                  SizedBox(width: 14),
                  Icon(icons['water'], color: pointGreen, size: 22),
                  SizedBox(width: 13),
                  Text(
                    'Î¨º',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: pointGreen, //Colors.black,
                      fontSize: 16,
                    ),
                  ),
                  Spacer(),
                  Text(
                    '$cupsÏªµ',
                    style: TextStyle(
                      color: pointGreen, //Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 17,
                    ),
                  ),
                  SizedBox(width: 14),
                ],
              ),
            ),
          ],
        ),
      );
    }

    if (mealType == 'sleep') {
      double hours =
          (foods.isNotEmpty ? (foods.first['sleep_hours'] ?? 0.0) : 0.0);
      return Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
        child: Stack(
          children: [
            // Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÌÖåÎëêÎ¶¨
            ClipRRect(
              borderRadius: BorderRadius.circular(18),
              child: Container(
                height: 54,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                ),
              ),
            ),
            // Ìù∞ÏÉâ ÎÇ¥Î∂Ä Ïπ¥Îìú
            Container(
              margin: const EdgeInsets.all(4),
              height: 46,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(14),
                boxShadow: [
                  BoxShadow(
                    color: Color(0x118F80F9),
                    blurRadius: 7,
                    offset: Offset(0, 4),
                  ),
                ],
              ),
              child: Row(
                children: [
                  SizedBox(width: 14),
                  Icon(icons['sleep'], color: pointGreen, size: 22),
                  SizedBox(width: 13),
                  Text(
                    'ÏàòÎ©¥',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: pointGreen, //Colors.black,
                      fontSize: 16,
                    ),
                  ),
                  Spacer(),
                  Text(
                    '${hours.toStringAsFixed(1)}ÏãúÍ∞Ñ',
                    style: TextStyle(
                      color: pointGreen, //Colors.black,
                      fontWeight: FontWeight.bold,
                      fontSize: 17,
                    ),
                  ),
                  SizedBox(width: 14),
                ],
              ),
            ),
          ],
        ),
      );
    }

    // // Î¨º, ÏàòÎ©¥ÏùÄ Í∏∞Ï°¥ CardÎ°ú Ïú†ÏßÄ
    // if (mealType == 'water') {
    //   int cups = (foods.isNotEmpty ? (foods.first['water_cups'] ?? 0) : 0);
    //   return Card(
    //     margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
    //     color: Colors.white,
    //     elevation: 5,
    //     shape: RoundedRectangleBorder(
    //       borderRadius: BorderRadius.circular(16),
    //       side: BorderSide(color: pointGreen, width: 1.2),
    //     ),
    //     child: ListTile(
    //       leading: Icon(icons['water'], color: pointGreen),
    //       title: Text(
    //         'Î¨º',
    //         style: TextStyle(
    //           fontWeight: FontWeight.bold,
    //           color: Colors.black,
    //           fontSize: 16,
    //         ),
    //       ),
    //       trailing: Text(
    //         '$cupsÏªµ',
    //         style: TextStyle(
    //           color: Colors.black,
    //           fontWeight: FontWeight.bold,
    //           fontSize: 17,
    //         ),
    //       ),
    //     ),
    //   );
    // }
    //
    // if (mealType == 'sleep') {
    //   double hours =
    //       (foods.isNotEmpty ? (foods.first['sleep_hours'] ?? 0.0) : 0.0);
    //   return Card(
    //     margin: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
    //     color: Colors.white,
    //     elevation: 5,
    //     shape: RoundedRectangleBorder(
    //       borderRadius: BorderRadius.circular(16),
    //       side: BorderSide(color: pointGreen, width: 1.2),
    //     ),
    //     child: ListTile(
    //       leading: Icon(icons['sleep'], color: pointGreen),
    //       title: Text(
    //         'ÏàòÎ©¥',
    //         style: TextStyle(
    //           fontWeight: FontWeight.bold,
    //           color: Colors.black,
    //           fontSize: 16,
    //         ),
    //       ),
    //       trailing: Text(
    //         '${hours.toStringAsFixed(1)}ÏãúÍ∞Ñ',
    //         style: TextStyle(
    //           color: Colors.black,
    //           fontWeight: FontWeight.bold,
    //           fontSize: 17,
    //         ),
    //       ),
    //     ),
    //   );
    // }

    // ÏãùÏÇ¨ Ïπ¥Îìú - Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÌÖåÎëêÎ¶¨, Ï†êÏàò Container
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: Stack(
        children: [
          // 1. Î∞îÍπ• Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÌÖåÎëêÎ¶¨ (ClipRRectÎ°ú Íº≠ ÏûòÎùºÏ§òÏïº Ìï®!)
          ClipRRect(
            borderRadius: BorderRadius.circular(18),
            child: Container(
              height: 66,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
          ),
          // 2. ÏïàÏ™Ω Ìù∞ÏÉâ Ïπ¥Îìú (margin: 2~3, Íº≠ radius ÎèôÏùºÌïòÍ≤å!)
          Container(
            margin: const EdgeInsets.all(4), // ÌÖåÎëêÎ¶¨ ÎëêÍªò
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(14), // ÏúÑÏôÄ ÎèôÏùº!
            ),
            child: Theme(
              data: Theme.of(context).copyWith(
                dividerColor: Colors.transparent,
                splashColor: pointGreen.withOpacity(0.1),
                colorScheme: Theme.of(
                  context,
                ).colorScheme.copyWith(primary: pointGreen),
              ),
              child: ExpansionTile(
                tilePadding: EdgeInsets.symmetric(horizontal: 14),
                childrenPadding: EdgeInsets.zero,
                leading: Icon(
                  icons[mealType],
                  color: pointGreen.withOpacity(0.85),
                  size: 22,
                ),
                iconColor: pointGreen,
                collapsedIconColor: pointGreen.withOpacity(0.85),
                textColor: pointGreen.withOpacity(0.90),
                title: Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Text(
                      '${_mealKorean(mealType)}',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: pointGreen,
                        fontSize: 16,
                      ),
                    ),
                    SizedBox(width: 10),
                    Container(
                      padding: EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 3,
                      ),
                      decoration: BoxDecoration(
                        color: Color(0xFFB7A9F7),
                        borderRadius: BorderRadius.circular(7),
                      ),
                      child: Text(
                        '$scoreÏ†ê',
                        style: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                          fontSize: 13,
                        ),
                      ),
                    ),
                  ],
                ),
                children:
                    foods.isEmpty
                        ? [
                          ListTile(
                            title: Text(
                              'Í∏∞Î°ù ÏóÜÏùå',
                              style: TextStyle(color: Colors.grey),
                            ),
                          ),
                        ]
                        : foods
                            .map(
                              (food) => ListTile(
                                title: Text(
                                  food['name'] ?? '',
                                  style: TextStyle(fontWeight: FontWeight.w600),
                                ),
                                subtitle: Text(
                                  'ÏãùÏù¥ÏÑ¨Ïú†: ${food['fiber_g']}g, ÏπºÏäò: ${food['calcium_mg']}mg',
                                  style: TextStyle(color: pointGreen),
                                ),
                                leading: Icon(
                                  Icons.eco,
                                  color: pointGreen.withOpacity(0.75),
                                ),
                              ),
                            )
                            .toList(),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mealKorean(String mealType) {
    switch (mealType) {
      case 'breakfast':
        return 'ÏïÑÏπ®';
      case 'lunch':
        return 'Ï†êÏã¨';
      case 'dinner':
        return 'Ï†ÄÎÖÅ';
      case 'snack':
        return 'Í∞ÑÏãù';
      default:
        return mealType;
    }
  }

  Widget _buildTotalScoreCard(BuildContext context) {
    // Ï†êÏàò Ìï©ÏÇ∞ Í≥µÏãù (ÏõêÌïòÎäî ÎåÄÎ°ú Î∞îÍøîÎèÑ Îê®)
    int totalScore = 0;
    print('allRecords length: ${allRecords.length}');
    print('allRecords: $allRecords');

    for (var food in allRecords) {
      double fiber = (food['fiber_g'] ?? 0).toDouble();
      double calcium = (food['calcium_mg'] ?? 0).toDouble();
      totalScore += (fiber * 2 + calcium * 3).toInt();
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: Stack(
        children: [
          // Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÌÖåÎëêÎ¶¨
          ClipRRect(
            borderRadius: BorderRadius.circular(18),
            child: Container(
              height: 54,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
          ),
          // Ìù∞ÏÉâ ÎÇ¥Î∂Ä Ïπ¥Îìú
          Container(
            margin: const EdgeInsets.all(4),
            height: 46,
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(14),
              boxShadow: [
                BoxShadow(
                  color: Color(0x118F80F9),
                  blurRadius: 7,
                  offset: Offset(0, 4),
                ),
              ],
            ),
            child: Row(
              children: [
                SizedBox(width: 14),
                Icon(Icons.star, color: pointGreen, size: 22),
                SizedBox(width: 13),
                Text(
                  'Ï†ÑÏ≤¥ Í±¥Í∞ï Ï†êÏàò',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: pointGreen,
                    fontSize: 16,
                  ),
                ),
                Spacer(),
                Text(
                  '$totalScoreÏ†ê',
                  style: TextStyle(
                    color: pointGreen,
                    fontWeight: FontWeight.bold,
                    fontSize: 17,
                  ),
                ),
                SizedBox(width: 14),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////

// ========== ÏïÑÎûòÎäî ÎÇòÎ®∏ÏßÄ ÌÉ≠ ÏòàÏãú ============
class PeopleTab extends StatelessWidget {
  @override
  Widget build(BuildContext context) => Center(child: Text('Ïª§ÎÆ§ÎãàÌã∞/ÏÇ¨ÎûåÎì§'));
}

// UI Í¥ÄÎ†®

class _GradientBorderPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final Paint paint =
        Paint()
          ..shader = LinearGradient(
            colors: [Color(0xFF8F80F9), Color(0xFF5ED593)],
            begin: Alignment.centerLeft,
            end: Alignment.centerRight,
          ).createShader(Rect.fromLTWH(0, 0, size.width, size.height))
          ..style = PaintingStyle.stroke
          ..strokeWidth = borderWidth; // ÎèôÏùº Î≥ÄÏàò ÏÇ¨Ïö©!

    final RRect rRect = RRect.fromRectAndRadius(
      Rect.fromLTWH(
        borderWidth / 2,
        borderWidth / 2,
        size.width - borderWidth,
        size.height - borderWidth,
      ),
      Radius.circular(cardRadius),
    );
    canvas.drawRRect(rRect, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => false;
}

final double cardRadius = 22.0;
final double borderWidth = 4.0;
